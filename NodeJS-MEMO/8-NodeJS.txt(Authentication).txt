1. 인증이란?
1-1. 로그인을 하면 DB의 사용자 데이터와 로그인 데이터를 비교한다.
1-2. 인증이 성공하면 세션 ID를 통해 쿠키를 내려준다.
1-3. 해당 세션 ID를 통해 인증이 된 사용자만 특정 페이지의 접근이나 리소스를 허용한다.


2. findByPk
=> 기본키를 사용해서 특정 레코드를 찾는 메서드이다.
=> where 조건으로 찾기에 적합하지 않다.


3. findOne
=> 주어진 조건에 맞는 첫 번쨰 레코드를 반환한다.


4. NodeJs 비밀번호 암호화
4-1. npm install bcrypt => 특정 문자열을 해시하는 패키지
bcrypt(1,2)
1 => 해싱을 적용할 문자열 (password)
2 => 얼마나 많은 해싱을 적용할 것인지, 12가 적당하다.

5. then() 블록 내에서 Promise.resolve()/ Promise.reject()
5-1. 일반적인 return value는 다음 then 블록에서 리졸브된 값이 인자로 들어간다.
5-2. Promise.resolve(value)도 마찬가지이다.
5-3. Promise.reject()를 호출하면 catch로 넘어간다. => then 블록 내에서 if문의 조건에 따라 다음 then 블록에 가고 싶지 않을 떄
사용한다.


5. route.post('/path', ()=>{}, ()=>{})
=> 여러개의 함수를 미들웨어로 사용할 수 있다.
=> 이를 통해서 req.session.isLoggedIn을 확인하여 해당 세션이 없다면 거절할 수 있다.


6. CSRF
6-1. Cross-Site-Request-Forgery
=> 사용자가 의도하지 않은 요청을 웹 애플리케이션에 보내도록 하는 공격이다.
=> 사용자의 권한 탈취가 목적이다.
=> 주로 로그인 상태(세션 ID가 포함된 쿠키)를 악용한다.
=> 당분간 지원 안함 그래서 에러 너무 걸림


7. email 
=> 대부분의 애플리케이션이 email 서버를 갖지 않고 AWS를 사용해서 메일을 발송한다.



