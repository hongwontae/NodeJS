1. Web Socket
1-1. HTML5의 사양의 일부이다.
1-2. HTML5와 함께 등장한 기술이다. 웹 애플리케이션에서 실시간 양방향 통신을 가능하게 한다.
1-3. WebSocket 프로토콜은 IETF(Internet Engineering Task Force)에서 RFC 6455로 표준화되었다.
1-4. 표준화 작업을 통해 다양한 웹 브라우저애서 일관된 방식으로 구현되고 사용할 수 있게 되었다.


2. 특징
2-1. 클라이언트와 서버의 지속적인 실시간 통신을 가능하게 한다.
2-2. 양쪽에서 데이터를 자유롭게 주고받을 수 있다. 한 번의 연결이 수립되면 추가적인 핸드셰이크 없이 데이터가 교환된다.
2-3. WebSocket은 HTTP 헤더를 줄여서, 데이터 전송에 따른 오버헤드를 최소화한다. 낮은 지연 시간을 제공
2-4. IETF의 RFC 6455에 정의된 표준 프로토콜이다.


3. 낮은 오버헤드
3-1. 오버헤드란 데이터 전송 시 추가적인 메타 데이터를 의미한다.
3-2. 초기 연결이 성공하면 지속적인 연결이 되기 떄문에 데이터 전송시 추가적인 메타 데이터(헤더)가 필요가 없다.
3-3. 연결이 성공하면 데이터 프레임만 주고 받는다. (최소한의 헤더만 포함된다.)


4. 핸드셰이크
4-1. 클라이언트와 서버 간의 WebSocket 연결을 설정하는 초기 단계을 의미한다.
4-2. 이는 HTTP을 통해 이루어지고 지속적인 양방향 통신이 가능해진다.


4-3. 클라이언트는 HTTP 업그레이드 요청을 보낸다. => 특별한 헤더가 포함된다.
ex)
(
GET /chat HTTP/1.1
Host: example.com
Upgrade: websocket => 클라이언트가 WebSocket 프로토콜로 전환하기를 원함을 나타냅니다.
Connection: Upgrade => 연결을 업그레이드하려는 의도를 나타냅니다.
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== => 클라이언트가 임의로 생성한 고유한 키입니다. 서버는 이를 사용해 응답을 생성합니다.
Sec-WebSocket-Version: 13 => WebSocket 프로토콜의 버전을 나타냅니다.
)
4-4. 서버가 해당 요청을 수락하면 101 Switching Protocols 응답을 보낸다.
(
HTTP/1.1 101 Switching Protocols => 프로토콜이 HTTP에서 WebSocket으로 성공적으로 변경되었음을 나타냅니다.
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= => Sec-WebSocket-Key 값을 기반으로 생성된 응답 키입니다. \
WebSocket 연결이 올바르게 설정되었는지를 확인하는 데 사용됩니다.
)
4-5. 핸드셰이크가 완료되면 지속적으로 실시간으로 통신 가능


5. 웹 소켓의 데이터 프레임
5-1. webSocket의 연결이 성공되고나서 전송되는 데이터의 구조를 의미한다.

5-2. 헤더와 페이로드(데이터 본문)로 구성되어 있다.
1. 프레임의 시작 부분 (Header) :  여러 필드가 포함되어 있습니다. 이 필드들은 데이터를 식별하고 
처리하는 데 필요한 정보를 제공합니다.
2. 페이로드 (Payload) : 실제 데이터 내용이 포함되는 부분입니다. 


6. Socket Cors
6-1. 소켓이 연결되면 cors 설정을 해줘야 한다.
6-2. const io = socketIo(server, {
    cors : {
        origin : "*",
        methods : ["GET", "POST"]
    }
});


7. Server의 socket.io
7-1. io.on('connection', ()=>{}) : 클라이언트에서 소켓 연결 요청이 오면 트러거되어 콜백 함수가 실행된다.
('connection'은 클라이언트에서 처음 socket 연결 요청이 왔을 떄 트러거 되는 이벤트 이름이다. 연결이 성공하면 다음 요청부터는
socket 인자를 통해서 요청을 받고 응답을 내려준다.)
7-2. io.emit() : 첫 번쨰 인자에 해당하는 클라이언트 이벤트에 대한 응답 + 모든 클라이언트에게 응답한다.
7-3. socket.emit() : 첫 번쨰 인자에 해당하는 클라이언트 이벤트에 대한 응답 + 요청을 보낸 클라이언트에게만 응답
7-4. socket.broadcast.emit() : 첫 번쨰 인자에 해당하는 클라이언트 이벤트에 대한 응답 + 요청을 보낸 클라이언트를 제외한
모든 클라이언트에게 응답


8. 클라이언트 socket.io
8-1. socket.on: 이벤트 리스너 등록 => socket.on('eventName', callback);
8-2. socket.emit : 서버로 이벤트와 데이터를 전송한다. 선택적으로 서버로부터의 응답을 받을 수 있는 콜백 함수 포함 가능
()
8-3. socket.disconnect() : 서버와의 연결을 수동으로 끊는다.
8-4. socket.connect() : 수동으로 소켓을 다시 연결한다.
8-5. socket.off(eventName, [callback]) : 특정 이벤트에 대한 리스너를 제거한다. 콜백 함수 지정x => 해당 이벤트에 등록된 모든 리스너제거
8-6. socket.off(eventName, [callback]) : 이벤트가 한 번만 발생한다.
8-7. socket.removeAllListeners([eventName]) : 특정 이벤트 또는 모든 이벤트에 대한 리스너를 제거한다.


9. EventName
9-1. server의 connect name : 서버가 시작될 떄 
9-2. Client의 connect name : 클라이언트가 서버에 연결되면 자동으로 connect 트리거한다.


10. 모든 연결이 완료되고 서버와 클라이언트의 이벤트 핸들러가 존재한다.
=> 클라이언트의 emit을 통해 서버의 socket.on('string')을 트리거할 수 있다.
=> socket.emit('string') => server의 socket.on('string') 트리거 가능
=> 이후 서버에서 socket.emit()을 통해 값을 전달가능




