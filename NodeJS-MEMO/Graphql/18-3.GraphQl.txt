1. 클라이언트 GraphQl 요청 방식
1-1. app.use('/graphql', createHandler({schema, rootValue})) 
=> 요청을 받아서 createHandler의 스키마, 리졸브에 의해서 처리된다.
=> 콜백함수 내부에 createHandler을 호출하면 제대로 실행되지 않아서 주의해야 한다.

1-2. 단순 쿼리 : JSON 형태로 {"query" : "{hello}"}
=> 이러한 단순 쿼리는 리졸버의 return 값이 원시값 하나, 그리고 스키마 쿼리가 받아들이는 인자가 없을 떄 가능하다.
=> 하나의 원시값만 반환할 떄 클라이언트에서 받을 값을 명시하지 않아도 된다.

1-3. 변수 이용 쿼리
1. type Query {
  greet(name: String!): String
} => 스키마

2. const rootValue = {
  greet: ({ name }) => `Hello, ${name}!`,
}; => 리졸버

3. {
  "query": "query($name: String!) { greet(name: $name) }",
  "variables": {
    "name": "Alice"
  }
} => 클라이언트 요청

4. {
    "query"(graphql임을 암시) : "query($name : String!){greet(name : $name)}",
    "variables" : {
        "name" " "Alice"
    }
} 

5. 요청할 떄 $
5-1. 변수를 사용하는 부분에 사용된다.
5-2. $를 사용하여 변수를 선언하는 것이다.
5-3. query($name : String!) => 받아들이는 name
5-4. greet(name : $name) => name은 $name 변수에 의해 정해진다.


6. query, mutation은 buildSchma 내부에서 하나만 정의 할 수 있다.
7. 그리고 이들안에 여러 개의 필드(메서드)을 생성할 수 있고 이들은 반환값을 옆에 써줘야 한다.
8. 그렇기 때문에 클라이언트 요청에 query : {query or mutation}으로 사용하는 것이다.


