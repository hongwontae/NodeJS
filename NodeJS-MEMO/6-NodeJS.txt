1. Cookie
1-1. 쿠키는 웹 브라우저와 서버 간의 상태 정보를 저장하고 전송되는 데이터 조각이다./ 사용자 식별하고 세션 정보 유지하는데 주로 사용

1-2. 쿠키 기본 구조
name=value; Expires = expriy-date; Path=path; Domain=domain; Secure; HttpOnly

1-3. 서버는 HTTP 응답 헤더를 통해 쿠키를 설정할 수 있다.
1-4. 클라이언트는 HTTP 요청 헤더를 통해 쿠키를 서버에 전송할 수 있다.
1-5. 쿠키는 특정 사용자의 브라우저에 데이터를 저장하는 것이다. => 다른 사용자와 충돌하지 않는다.
1-6. 서버에서 쿠키를 보내면 디폴트로 브라우저가 요청을 보낼떄마다 서버에 쿠키를 보낸다.



2. 인위적으로 req 객체 추가
2-1. req.ppp = true라고 설정하면 해당 객체는 클라이언트에게 res되기 전까지는 유효하다.
2-2. 맨 처음에 app.use((req, res, next)=>{ req.data = true next()})를 넣으면 req.data가 다른 라우트에서 유효하다.


3. res.setHeader()
3-1. 첫 번쨰 인자는 'Set-Cookie'로 쿠키를 설정하는 예약어
3-2. 두 번쨰 인자는 헤더의 값을 설정한다. 키-값으로 저장하는것이 일반적이다.


** 4. Server - Client Cookies 설정
=> cors 떄문에 다소 복잡한 설정이 필요하다.

4-1. cors({credentials : true})
=> 서버에서 쿠키를 설정하고 응답에 포함시키기 위해 설정한다.
=> 서버가 응답을 보낼 떄 쿠키를 포함하도록 허용한다.
=> credentials 설정 객체가 존재하면 origin을 설정해야 한다. =>(credentials : true 때문에 origin *이 default 설정이 사라진다.)


4-2. cors({origin : 'http://......'})
=> 요청을 받아들일 떄 origin에 해당하는 도메인만 허용한다.
=> credentials이 없고 origin이 존재하지 않으면 모든 도메인을 받아들인다.
=> string일 때는 하나의 도메인만 허용한다.
=> arr일 때는 ['', ''] 여러 string을 허용한다.
=> false => 모두 거절한다.


4-3. fetch({credentials : 'include'})
1. 요청을 보낼 떄 자동으로 저장된 쿠키를 보낸다.
2. cors 보안 정책 떄문에 일반적으로는 쿠키를 포함하지 않는다. 해당 설정을 하면 요청 응답에 대한 쿠키를 받아들여서 브라우저에
저장 할 수 있다.


5. res.cookie(key, value, {setting});
setting
maxAge => 쿠키의 수명을 밀리초 단위로 설정
expires => 쿠키의 만료 날짜
** domain => defalut(서버 도메인 내에서만 쿠키가 유효하다.)
** sameSite => 서버에서 쿠키를 설정할 떄 해당 쿠키가 유효한 도메인을 지정하는 것
sameSite = strict => 서버 도메인 내에서만 쿠키가 전송된다.
sameSite = lax => 예외적인 상황에서 타사 사이트로 쿠기 전송가능
sameSite => None => 모든 요청에서 사용가능/ secure : true와 함께 사용된다. 그렇지 않으면 쿠키를 받지 않음

** secure => true라면 https 통신만 서버에서 클라이언트로 cookie를 전달할 수 있다.

httpOnly => 클라이언트에서 쿠키에 접근할 수 없도록 설정


6. req.cookies.key
=> 쿠키가 저장되면 자동으로 쿠키가 요청에 담긴다.
=> 해당 쿠기를 식별하기 위해 cookies와 쿠키에 저장된 key에 접근하면 값을 얻을 수 있다.


7. res.text() (front)
=> 데이터를 받을 떄 string을 받는 fetch return 된 value의 method





