1-1. next를 호출해야 다음 미들웨어로 넘어간다.
1-2. app.use((req, res, next) => {}) 콜백 함수의 인자의 순서를 지켜줘야한다.
1-3. app.get/post/delete/put를 사용하여 받을 수 있다.
1-4. 백엔드에 존재하지 않는 요청을 보내면 app.use()를 통해 에러처리를 한다.
1-5. 같은 경로더라도 get/post/put..에 따라서 다른 경로로 인식한다.


2-1. express.Router()를 사용해서 요청 처리 코드를 분할처리했을 떄 경로 필터링을 할 수 있다.
2-2. res.sendFile()를 사용하면 자동으로 헤더를 설정해준다.
2-3. 파일 경로를 설정하려면 path라는 모듈을 사용해야 한다.
2-4. __dirname => 절대 경로를 프로젝트 폴더로 고정해 주는 전역 변수이다.
2-5. join을 사용해서 경로를 이어 붙일 수 있다.
=> path.join(__dirname, '../','data', 'data.html');
=> module.exports = path.dirname(require.main.filename); __dirname 대신 import 해서 사용가능


3. 정적 파일
=> 일반적으로 파일 시스템에 direct로 접근할 수 없다.
=> 정적 파일 시스템에 접근을 허용하려면 app.use(express.static(path.join(__dirname, '폴더이름')))
=> 해당 폴더의 파일들의 접근을 허용해준다.
=> 정적 파일과 react 파일의 충돌점이 있으면 react의 설정이 우선된다.


4. body-parser
4-1. bodyParser.json()
=> JSON 형식의 데이터가 포함된 요청 본문을 해석할 떄 사용
=> 요청 헤더가 content-Type : application/json

4-2. bodyParser.urlencoded({extended: true})
=> extended는 데이터의 객체, 배열 형태를 허용여부
=> URL-encoded 형식의 데이터가 포함된 요청 본문 해석
=> 요청 헤더가 Content-Type : application/x-www-form-urlencoded 주로 사용


5. URL-encoded
5-1. URL 인코딩은 웹에서 특정 문자나 기호를 URL에 안전하게 전송하기 위해 사용되는 방법 
URL 인코딩은 특수 문자나 한글, 공백 등과 같은 URL에 허용되지 않는 문자들을 다른 문자열로 대체하여 전송한다.
이때, 각 문자는 "%" 다음에 그 문자의 ASCII 코드를 16진수로 표현한 값으로 대체된다.
이런식으로 변환된 URL은 웹 브라우저에서 안전하게 전송될 수 있다.


