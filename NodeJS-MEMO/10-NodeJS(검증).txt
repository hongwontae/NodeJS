1. 사용자 입력 유효성 검사
=> Client의 form 데이터가 DB에 저장되기 전에 server에서 유효성 검사를 실시해서 데이터를 걸러내는 것을 의미한다.


2. 입력 검증 방법
2-1. Client에서 데이터를 서버에서 보내기 전에 유효성 검사를 실시할 수 있다.
2-2. Server에서 DB에 저장하기 전에 유효성 감사를 실시한다.


3. express-validator
3-1. 설치 방법 : npm install express-validator
3-2. 적용 : server => router => controller 단계에서 router 단계에서 실행한다.

3-3. body or check
body => 요청 본문에 관해서 유효성 검사를 실시한다.
check => 요청 객체에 다양한 속성을 검증할 떄 validationResult

3-4. 배열 or 함수
배열 => 배열을 사용하면 순차적으로 유효성 검사를 실시하고 일관된 로직을 생성할 수 있다.
함수 => 함수를 사용해도 순차적으로 유효성 검사를 실시한다. 조금 더 복잡한 로직을 사용할 떄 사용한다.

3-5. 메서드
isEmail() => @를 하나만 포함하는지, 영문자와 숫자로 구성된 도메인이 존재하는지 등을 검사한다.
isLength({min : 5}) => 해당 데이터가 최소 5 길이를 포함하는지 검사한다.
isURL() => 해당 데이터가 url 형식인지 검사한다.
isFloat() => 특정 입력값이 부동 소수점 숫자인지 검사한다.
isNumeric => 해당 데이터가 숫자만으로 이루어졌는지 검사한다.

custom(value, {req, path, location} => {}) 
=> value는 초기의 검증 대상의 값/ req 일부 요청 객체, location은 검증이 발생되는 위치
, path는 검증이 발생한 필드의 경로(req.body.key or req.params.key => key을 의미한다.)
=> custom 내부에서 throw new Error를 호출하면 validationResult에 적용된다.
=> custom 내부에서 throw new Error를 정의하고 나머지 true 처리를 해줘야 errors.isEmpty에서 true가 반환된다.
=> custom 내부에서 비동기 작업을 수행할 경우 error는 Promise.reject()로 처리해주면 validationResult(req) 객체에서 받을 수 있다.
(custom 함수의 return은 true, false, 에러, promise을 반환해야 하고 이를 validationResult(req)에서 사용할 수 있다.)

isAlphanumeric => 숫자와 일반 문자만 허용한다.


4. const errors = validationResult(req);


5. 데이터 살균
5-1. express-validator는 유효성 검사 뿐만 아니라 데이터 재처리도 할 수 있다.
(router에서 데이터 재처리를 하면 controller의 req.body에서 재처리된 데이터를 사용한다.)

5-2. trim() => 들어온 데이터의 공백을 제거하여 넘겨준다.

5-3. normalizeEmail() => 이메일을 소문자화한다.


