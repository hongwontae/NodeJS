1. 페이지화
1-1. get 요청 + 쿼리 파라미터를 이용하여 알맞은 데이터를 가져온다.

1-2. findAndCountAll()
=> 특정 조건에 맞는 레코드를 찾고 그 레코드의 총 개수와 레코드 자체를 동시에 반환한다./ 페이지네이션을 구축할 떄 많이 사용한다.
=> find : 조건에 맞는 레코드를 DB에서 가져온다.
=> count : 조건에 맞는 총 레코드 수를 계산한다.
=> findAndCountAll은 두 가지 속성 (count, row(db 데이터 배열)) 객체를 반환한다.

조건
1. where
2. limit : 반환할 최대 레코드 수
3. offset : 결과 집합에서 시작할 위치
4. order : 결과를 정렬하는 조건 지정
5. include : 관계를 포함하는 조건
6. group : group by


2. Logic
2-1. limit을 설정한다. => 10./ 반환할 최대 레코드 수
2-2. offset을 설정한다. => (page-1) * limit/ 결과 집합에서 시작할 위치
(page가 1이라면 1부터 10개, 2라면 11부터 20), (offset은 0이라면 1부터 limit까지 준다는 이야기이다.)
2-3. findAndCountAll({
    limit : limit,
    offset : offset
}) => 반환할 레코드 수와 시작할 위치를 계산해서 rows(데이터 배열)와 전체 count(*)을 전달해준다.
2-3. Math.ceil(count/limit)을 통해 전체 페이지수를 계산하여 넘겨준다./ 총 데이터 숫자/페이지당 항목 수
2-4. 전체 페이지를 넘겨준다.
2-5. rows을 넘겨준다.
2-6. res.json({
    totalItems: count,
    totalPages: Math.ceil(count / limit),
    currentPage: page,
    items: rows
});


2-3. res.json을 통해 레코드 수, 반환할 페이지의 수, 현재 페이지, 해당 페이지의 데이터 배열을 전달한다.

2-4. currentPage를 통해 state 변경과 useEffect 의존성 배열에 넣어 전체 컴포넌트를 컨트롤한다.



