1. 파일 피커
1-1. input type = "file"로 지정하면 기본적인 파일 피커가 생성된다.


2. Multipart-Form-Data
2-1. 파일 자체는 이진법으로 이루어진 데이터이기 떄문에 일반적인 방법으로 추출할 수 없다. => bodyParser로 접근할 수 없다.

2-2. 여러 부분으로 구성: 폼 데이터와 파일은 각각 별도의 부분으로 나뉘어 전송됩니다.
2-3. 파일 업로드 지원: 파일 업로드 시에는 파일의 데이터와 메타데이터(파일 이름 등)를 포함하여 전송할 수 있습니다.
2-4. Boundary 구분: 각 부분은 고유한 Boundary 문자열로 구분됩니다.

2-5. FormData 객체는 자동으로 multipart/form-data 형식으로 인코딩하여 서버로 전송된다.
=> 이 떄 headers가 자동으로 설정된다. headers: { 'Content-Type': 'multipart/form-data' }

2-6. 멀티파트 형식의 구조
1. formdata.append('email', email)/ formdata.append('password',password)
=> 각 append 추가 데이터가 하나의 파트이다. 이를 고유한 문자열인 바운더리로 구분한다.

2. Content-Disposition:
=> 하나의 파트에 데이터 유형과 이름을 정의

3. Content-Type
=> 파일의 MIME 타입 (텍스트 데이터는 생략가능)

4. (binary data): 파일의 실제 바이너리 데이터.

=> 모든 파트는 하나의 연속적인 2진 데이터 스트림으로 인코딩된다.

5. multipart 형식은 요청 헤더와 요청 본문으로 나뉘어진다.
=> 요청 헤더에는 멀티 파트 데이터임을 알리는 header와 각 파트를 구분하기 위해 바운더리가 존재
=> 요청 헤더의 바운더리가 각 파트의 구분자이다.

=> 요청 본문은 각 파트의 데이터 타입에 따라 Content-Type이 다르게 설정된다./ 텍스트의 경우 생략 가능
=> 파일의 경우 Content-Type: image/jpeg 처럼 필요하다.


3. Multer
=> 요청 파일 데이터을 분석할 수 있다.
=> 파일 데이터 + 텍스트 데이터 혼합해서 처리가능
=> 클라이언트의 req headers가  multipart/form-data라면 Multer 미들웨어를 통해서 각 부분을 분석하여 폼 데이터 및 파일
데이터를 추출할 수 있다.

3-1. multer.diskStorage
1. 파일을 특정 디렉토리에 저장할 수 있고, 파일명과 경로를 커스터마이징할 수 있다.

2. 인자에 객체를 받아들인다.
2-1. 저장 경로 설정/ 2-2. 파일명 설정
multer.diskStorage({
    destination : (req, file, cb)=>{
        cb(null, 'uploads/')
    }, => req는 요청 객체, file은 파일 객체, cb는 첫 번쨰 인자는 에러, 두 번째 인자는 저장될 디렉토리 경로
    filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  } => 동일하고, cb의 첫 번쨰는 에러, 두 번쨰는 파일명
})
(파일명이 동일하면 덮어쓴다.)

3. const upload = multer({ storage });
=> multer.diskStorage 작업이 끝나면 multer을 호출하고 객체에 넣으면 formdata를 처리하는 미들웨어가 생성된다.


4. upload
4-1. upload.single('image');
=> 단일 파일을 업로드한다./ req.file에 파일 정보가 저장된다.

4-2. array(fieldname[, maxCount])
=> 하나의 필드에 대해 여러 파일을 업로드한다./ req.files 배열에 저장된다.

4-3. none()
=> 파일 없이 폼 데이터만 처리한다.
=> req.body에 저장한다.


5. fileFilter와 mimetype
5-1. mimetype => 파일의 종류와 형식을 식별하기 위한 클라이언트와 서버의 header의 Content-Type
5-2. Content-Type : application/json, text/html, image/png...

5-3. fileFilter는 파일이 저장되기 전에 filtering하는 함수이고 객체의 값으로 들어가는 미들웨어 옵션이다.
ex) const filefilter = (req, file, cb)=>{
    if(file.mimetype === 'image/jpeg' || file.mimetype === 'image/png'){
        cb(null, true)
    } else {
        cb(null, false)
    }
}
=> cb의 첫 번쨰 인자는 에러를 트리거한다. => null이 아니라면 오류로 간주하고 파일 업로드를 중단한다.
=> 일반적으로 if문을 사용해서 new Error('..')로 에러 처리를 하면 범용 에러 미들웨어가 처리한다.\


6. 파일 정보 DB 저장
6-1. 파일 자체를 DB에 저장하면 비효율적이다. => 파일의 정보를 저장하는 것이 효율적이다.
6-2. 파일 자체는 다른 저장소에 저장하고 req.file에 대한 정보를 저장하는 것이 좋다.



7. server에 정적 파일 제공
7-1. app.use('/uploads',express.static(정적 파일이 있는 주소));
=> http://localhost:3000/uploads/파일이름.png
=> 이러한 네트워크 요청을 get으로 받아들여서 서버 내의 정적 파일을 client에 반환한다.

7-2. <img src={`http://localhost:3000/uploads/${ele.filename}`}/>
=> imgdml src가 네트워크 요청으로 이루어져 있다면 렌더링 시에 네트워크 요청을 보낸다.


8. res.send();
8-1. 다양한 타입의 데이터를 보낼 떄 사용하는 메서드

8-2. 문자열이나 객체를 인수로 받으면 Content-Type 헤더가 자동을 설정된다. (text/html, application/json)
8-3. 버퍼를 인수로 받으면 Content-Type을 명시적으로 설정해야 한다.

8-4. 브라우저의 반응 (서버로부터 받은 Content-Type에 따라 해석한다.)
1. text/html : DOM 트리로 변환하여 렌더링한다.
2. application/json : JSON 객체로 해석한다.
3. image/png, image/jpeg.. : 이미지 URL을 열면 이미지를 바로 볼 수 있다.
4. application/pdf.. :  Content-Disposition가 liline일 경우 브라우저에서 바로 띄우고 attachment일 경우 다운로드 창을 띄운다.


9. 스트림과 청크
9-1. 스트림 : fs.createReadStream() => 파일을 읽는 스트림을 생성한다. 해당 스트림은 데이터를 일정 크기로 나누어 읽는다.
9-2. 4가지 유형 존재 => 읽기 스트림 (Readable), 쓰기 스트림 (Writable), 양방향 스트림 (Duplex), 변환 스트림 (Transform) 

9-3. 청크 : 스트림이 한 번에 처리하는 데이터의 작은 부분/ 파일의 각 조각이 청크가 된다.

*** fs.readFile은 파일 전체를 메모리에 로드한다. 반면 createReadStream은 작은 조각(청크)으로 나누어 메모리에 로드하여 읽는다.
*** stream을 사용하면 메모리 사용량이 적기 떄문에 큰 파일을 다루기 적합하다.

9-4. fs.createReadStream()
1. 스트림 생성 : 파일을 읽기 위한 스트림 객체 생성
2. 데이터 이벤트 : 스트림이 파일 데이터를 청크 단위로 읽을 때마다 data 이벤트가 발생합니다.
3. 종료 이벤트: 파일의 모든 데이터가 읽혀졌을 때 end 이벤트가 발생합니다.
4. 에러 이벤트: 읽기 중에 오류가 발생하면 error 이벤트가 발생합니다.

9-5. pipe()
1. createReadStream이 호출되면 읽기 스트림이 생성된다.
2. pipe(res)가 호출되면 읽기 스트림에서 발생하는 data 이벤트가 자동으로 쓰기 스트림(res)에 전달된다.
3. 이 떄 chunk 단위로 읽혀지고 chunk는 res에 write된다.
4. 자동으로 client에 전송도 된다.

5. peipe() 전송 전에 res.setHeader()을 Content-Disposition, Content-Type을 지정할 수 있다.
Content-Disposition의 inline => 브라우저에서 파일을 연다.
filename => 파일이 다운로드될 떄 클라이언트에게 보여질 파일 이름
form-data => 클라 => 서버에서 사용되는 타입



10. 스트림 데이터를 받을 떄 client
1. target="_blank
=> 링크를 클릭했을 떄 새 창이나 새 탭이 열린다.
=> 기존의 창과 새 창의 관계가 정립된다./ 새 창에서 window.opener을 통해 접근하려고 하면 보안 이슈
=> 새 창에서 열 필요 없는 경우는 target="_blank"을 사용하지 않으면 2가 필요없다.

2. noopener 
=> 링크를 클릭했을 떄 새 창이 열리면 기존의 창과 새 창의 관계를 끊어준다.
=> window.opener를 사용할 수 없다./ 보안 강화


11. pdfkit
1. npm install pdfkit
2. const pdf = new PDFKit();

3. const doc = new PDFDocument(); : pdf 문서를 생성
4. doc.text('Hello, World!'); : pdf에 문자나 CSS를 추가
5. const writeStream = fs.createWriteStream(path); : 서버에 파일을 저장하기 위해 Stream을 생성
6. doc.pipe(writeStream) : pdf문서를 읽기 스트림에 연결
7. doc.end(); : 닫는다.

*** createRead, createWrite를 호출하는 것은 스트림을 생성하는 것 뿐이다. => 연결 통로를 만드는 것 뿐이다.
=> pipe()를 호출해야 전달되는 것이다.
=> pipe()를 호출하면 데이터를 전달하는 데 이 떄 스트림에서 스트림으로 가야 한다. 스트림이 아니면 실패한다.












