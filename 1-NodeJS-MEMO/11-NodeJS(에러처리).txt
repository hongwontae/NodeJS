1. 에러처리
1-1. try-catch 블록 내에서 에러를 처리
1-2. promise를 반환할 경우 catch에서 에러를 처리
=> 두 가지 경우 직접 에러를 처리할 수 도 있고 express error 처리 미들웨어를 사용할 수 도 있다.
=> express-validator custom에서 throw를 던져도 코드 실행이 멈추지 않는 이유는 에러를 내부적으로 처리하기 때문이다.

2. throw를 던지지 않고 어떤 이유로 서버에서 에러가 발생하면 catch를 찾는다. 그 이후에 catch의 로직이 실행되면 uncaughtException
으로 서버가 다운되는 것을 막을 수 있다.


3. express 범용 error 처리
3-1. controller에서 에러가 발생한다.
3-2. catch에서 error 데이터와 함께 next(err)를 호출한다. 
=> next 인자에 어떠한 값이라도 존재하면 에러 처리 미들웨어로 간다. 그렇지 않으면 다음 미들웨어로 갈 뿐이다.
3-3. app.use((errors, req, res, next)=>{
    ...
}) => 인자가 4개가 있다면 에러 처리 전용 미들웨어이다. next()의 도착점은 여기다. 에러를 처리한다.
=> 비동기 처리 시에도 catch 블록에서 next(err)를 통해 처리할 수 있다.


4. try에서 throw를 던지고 catch에서 throw를 던지고 next(err)를 호출해도 에러 처리 미들웨어가 트리거 되어 처리된다.


5. 상태 코드
5-1. 특정 상태에 대한 특정 코드를 보냄으로써 서버 <= => 클라이언트의 통신을 원활하게 한다.

5-2. 2xx (success)
5-3. 3xx (Redirect)
5-4. 4xx (Client-side-error)
5-5. 5xx (Server-side-error)

5-6. 서버에서 res.json()을 보낼 떄 기본값은 200이다.


6. try-catch의 throw와 next(...), if문의 throw, promise의 catch의 next(...) => 에러 처리 미들웨어가 처리해준다.

