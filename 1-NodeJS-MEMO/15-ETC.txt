1. Update을 구현할 떄 기존의 데이터를 가지고 오고 싶다면 => Redux나 Context API, 클라이언트 url을 이용하는 방법이 존재한다.


2. input의 value와 defaultVlaue는 충돌을 일으킨다.
=> 일반적으로 value를 우선시 한다.


3. 초기에 변수명을 잘 지어야 한다. => 이거 떄문에 client하고 backend하고 통신 에러가 발생한다.


4. Rest API Authentication
=> 무상태이기 떄문에 세션을 사용하지 않는다.
=> 각 요청이 인증에 필요한 데이터가 필요하다.
=> Rest api는 서버에 클라이언트에 대한 정보를 저장하지 않는 것이 원칙이다.
=> 클라이언트에 토큰을 부여한다.

=> JWT라는 토큰은 서버에서 비밀 키로만 확인이 가능하다.


5. next()
=> next()가 호출되면 즉시 다음 미들웨어로 이동한다.


6. React-Tailwind Height
=> 부모요소가 100vh일 떄 h-auto을 통해 부모 요소의 높이을 가질 수 없다. h-auto는 자신의 컨텐츠의 높이만큼만 차지한다.
=> h-full을 통해 부모 요소의 전체 높이를 받아들일 수 있다.


7. async http 파일의 함수를 사용할 떄 return 값이 Promise로 덮여서 나오기 때문에 await로 받아야 한다.


8. Clent <= => Server
1. http 전송을 할 떄 어떤 http 메서드를 사용할지
2. http 전송에 데이터를 보내야하는지?, 어떤 headers를 갖는지?
3. server에서 bodyparser, cors 설정
4. router(express-validator) => controller 흐름 완성시키기


9. 에러 처리 미들웨어가 존재할 떄 if 문 내에서 return next(err)을 사용해야 밑에 코드들이 동작하지 않는다.
=> next()가 호출되면 끝나는 줄 알았다. 그게 아님


10. next(err) 인자을 넣을 떄 new Error('Error 발생')을 통해 값을 전달하면 에러 처리 미들웨어서 error.message로 받아야 사용할 
수 있다.


11. jsonwebtoken
1. JSON 객체를 사용하여 정보를 안전하게 전송하기 위한 방법이다.
2. JWT는 세 부분으로 나누어진 문자열이고 각 부분은 .으로 구분된다.
- header : 토큰의 유형과 해싱 알고리즘을 지정한다.
- payload : 클레임이라고 하는 정보가 포함된다. 토큰의 발행자, 토큰의 유효기간, 사용자 정보등을 포함할 수 있다.
- signature

3. 인증이나 정보 교환에 사용된다.

4. 로컬 스토리지에 저장된 JWT를 보내는 좋은 방법은 header을 통해 보내는 것이다.
1. header : {'Authorization' : 'Bearer' + token}
=> JWT를 식별하기 위해 Bearer를 관행적으로 사용한다.

5. JWT.sign()으로 만료시간을 정하면 verify 함수가 자동으로 검사한다.


12. req.get('header-Name');
=> 특정 필드의 헤더 이름을 인자로 넣어서 header의 값을 가져올 수 있다.


