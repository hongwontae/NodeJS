1. GraphQL
=> 쿼리 언어이자, 런타임 환경이다.
=> Rest API의 대안, 클라이언트가 데이터를 요청할 떄 사용한다.


2. 특징
2-1. 클라이언트가 필요한 데이터의 구조와 양을 정확히 명시가능 (over fetching, under-fetching 해결)
2-2. 단일 엔드포인트이다. (하나의 요청으로 원하는 데이터를 효율적으로 가져올 수 있다.)
2-3. 스키마와 타입 시스템 (데이터에 대한 엄격한 타입 시스템, 서버에서 스키마 정의, 클라이언트는 스키마를 통해 어떤 데이터를 요청할 수
있는지 알 수 있다.)
2-4. 실시간 데이터


3. 동작 방식
3-1. 쿼리 : 요청할 데이터 구조를 정의한다.
3-2. 뮤테이션 : 데이터 변경을 위해 사용된다.
3-3. 서브스크립션 : 실시간 이벤트를 처리하기 위해 사용된다.


4. 라이브러리 설치
graphql, graph-http (express-graphql은 더 이상 지원하지 않는다)


5. 작동 방식
5-1. 클라이언트에서 GraphQl 요청을 서버에 보낸다.
5-2. GraphQl 전용 서버가 이 요청을 받는다. => Graph-http나 Apollo Client로 GraphQl 서버 생성가능
5-3. GraphQl 서버에서 제공할 데이터 타입과 쿼리, 뮤테이션을 스키마라는 곳에서 정의한다.
5-4. 클라이언트 요청을 처리할 함수를 리졸버에서 정의한다. => 각 필드에 대한 실제 데이터를 가져오거나 변경하는 로직이 존재한다.


6. 클라이언트에서 Graphql 요청 보내기
6-1. body : JSON.stringify({
    query (Graphql 요청임을 나타낸다.) : `
        query{ // graphql get인 Query을 나타낸다. mutation이 될 수 도 있다.
        hello{ // 스키마의 Query의 hello 메서드를 호출한다. 리졸브에 존재한다.
        text, // 스키마의 데이터 타입에 해당하는 리졸버 함수의 값을 가져오는 명령어
        views
        }
        }
    `
})







