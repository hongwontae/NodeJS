6. 스키마
6-1. GraphQL 서버의 데이터 구조를 정의한다.
6-2. 서버에서 어떤 종류의 데이터를 쿼리할 수 있는지, 데이터가 어떻게 구조화되어 있는지를 설명한다.
6-3. GraphQL은 타입 정의 언어(DSL)를 사용하여 작성한다.
=> type이라는 키워드는 그냥 앞에 붙이고 사용한다.
=> Query : 클라이언트가 데이터를 읽기 위해 사용할 수 있는 필드를 정의합니다.
=> Mutation: 클라이언트가 데이터를 변경하기 위해 사용할 수 있는 필드를 정의합니다.
=> Subscription: 실시간 데이터를 다루기 위해 사용됩니다.
=> type: 객체의 구조를 정의합니다.
6-4. !는 not null을 의미한다.
6-5. 인수 객체를 사용할 떄는 input이라는 키워드를 사용한다.

6-5. ex)
buildSchema(`
    type RootQuery{ // 데이터 구조를 정의한다.
    hello : string! // hello라는 필드가 존재하고 해당 타입은 문자열이고 not null이다.
    }

    schema{ // 스키마의 루트 타입을 지정한다.
        query : RootQuery // 데이터를 조회할 떄 사용할 루트 타입
        mutation // 데이터를 변경할 떄 사용할 루트 타입
    }
`)
schema{} : 명확한 엔드 포인트를 설정하여 클라이언트가 데이터를 조회하거나 변경할 수 있도록 하기 위해

6-5. 스키마에서 뮤테이션을 정의할 떄 인자타입은 스칼라 타입 or inputObjectType이여야 한다.
스칼라 타입 : 더 이상 나뉘어지지 않는 단일 값(String, Int, Float, Boolean, ID..)
inputObjectType : 입력 객체 타입, 여러 개의 필드를 포함할 수 있는 복합 타입, input이라는 키워드를 앞에 붙여야한다.


7. 리졸버
7-1. 실제 데이터를 가져오거나 변경하는 함수를 정의한다.
7-2. 리졸버는  클라이언트의 쿼리를 처리하고, 데이터베이스나 외부 API에서 데이터를 가져와 클라이언트에 반환한다.
7-3. 리졸버는 스키마에서 정의한 타입과 필드에 매핑된다.
7-4. 리졸버 함수는 부모 객체(parent), 인자(args), 컨텍스트(context), 그리고 정보(info)를 인자로 받을 수 있다.

7-5. ex)
module.exports = {
    hello(){ // 스키마에 적용한 type, query, mutation에 대한 function, 

    }
}


8. GraphQl 서버 생성
8-1. const { createHandler } = require('graphql-http/lib/use/express');
=> graphql-http는 많은 프레임워크를 지원하기 때문에 express에서 사용가능한 graphql 서버를 생성하기 위해 깊숙히 접근한다.
8-2. app.use('/graphql') : graphql 엔드 포인트를 지정한다.
8-3. app.use('/graphql', createHandler({
    스키마,
    리졸버
})) : createHandler를 호출해서 인자에 객체의 값으로 스키마와 리졸버를 넣어준다.


9. GraphQl 클라이언트 요청
9-1. HTTP 메서드는 Post
9-2. 요청 헤더는 JSON 형식이다.
9-3. JSON의 형태는 body : JSON.stringify({
    query : ` // query 키를 통해 graphql 요청임을 암시
        query(or mutation)
    `, 
    variables : {
        ... // $id에서 들어갈 값
    }
})