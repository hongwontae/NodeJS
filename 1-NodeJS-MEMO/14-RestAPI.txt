1. Rest API란?
1-1. 클라이언트와 서버 간의 상호작용을 위한 웹 서비스 아키텍쳐입니다.
1-2. 몇 가지 원칙에 기반합니다
1-3. 첫 째, 자원 기반입니다. 모든 것은 자원으로 간주되며, 각 자원은 고유한 URL로 식별됩니다.
1-4. 둘 째, HTTP 메서드를 사용해서 자원들에 대한 작업을 내포합니다. GET(자원 조회), POST(자원 생성), PUT(자원 전체 수정)
, PATCH(자원 부분 수정), DELETE(자원 삭제)
1-5. 셋째, Stateless(상태 없음)입니다. 서버는 이전 요청의 정보를 기억하지 않고 
서버는 클라이언트의 상태를 저장하지 않습니다. 즉 모든 상태 정보(인증 토큰, query 매개변수의 페이지 번호...)를 각 요청에 포함시켜야 한다.
1-6. 넷쨰, 자원은 다양한 형식으로 표현될 수 있고 클라이언트나 서버가 원하는 형식을 사용할 수 있습니다.
(HEADER를 통해 형식을 지정할 수 있다.)


2. Data Formats
=> Html, PlainText(일반 텍스트), XML(아무 태그나 사용), JSON(JS로 변환하기 쉽다.)...


3. Routing
3-1. Http 메서드가 서버에 있는 경로로 요청을 보낸다.
=> 이러한 동작은 클라이언트에서 비동기 작업으로 이루어진다.

3-2. 요청에 대한 응답은 다양한다. (2)

3-3. API 엔드 포인트 : post, get, delete.. 같은 메서드나 각 경로를 의미하는 것

3-4. get, post, delete, post(기존의 데이터를 덮어쓰는 용도가 아님), put(추가 or 기존의 데이터 덮어씀), Patch(일부분만 업데이트)
=> 해당 HTTP 메서드들이 무조건 해당 메서드의 의미를 가지는 것은 아님, 인위적으로 다른 작업 할 수 있다.


4. PostMan
4-1. post 요청을 보낼 떄 body에 JSON 데이터 형식을 갖추고 싶다면
엔드 포인트 설정 => Body tab => 형식을 JSON으로 => JSON 형식을 갖춰서 데이터 작성 => Button Click


5. Rest API And CORS
5-1. 클라이언트와 서버가 다른 출처를 가지고 있다면 CORS 정책 위반으로 통신이 실패한다.

5-2. 단순요청
1. GET, POST, HEAD 중 하나이고
2. Accept, Accept-Language, Content-Language, 
Content-Type : (application/json, x-www-form-urlencoded, mutipart/form-data, text-plain)
중 하나의 헤더여야 한다.

3. 과정
1. 클라이언트가 다른 출처의 서버로 단순 요청을 보낸다.
2. 브라우저는 요청이 교차 출저 요청인지 확인한다. 서버의 응답에 CORS 헤더를 포함하는지 확인한다.
3. 서버는 Access-Control-Allow-Origin..등의 헤더를 포함한 응답을 보낸다. => 요청을 허용할 출저가 명시된다.
4. 브라우저는 응답의 cors 헤더를 확인하고 허용할지 결정한다. 헤더가 옳다면 응답을 클라이언트에게 전달한다.
(CORS의 응답 헤더 확인은 브라우저가 한다.)

5-3. 사전 요청
1. 사전 요청을 통해 브라우저가 확인하고자 하는 것은 HTTP 메서드, Header, Credential(자격 증명)이다.
2. delete, put, patch
3. post 요청일 떄 application/x-www-form-urlencoded, multipart/form-data, text/plain 이외에 Content-Type일 떄
=> application/json을 사용하면 사전 요청이다.

3. 과정
1. 실제 요청을 보내기 전에 사전 요청인 OPTIONS 메서드를 사용하여 서버에 요청을 보낸다.
(OPTIONS을 받고 res.sendStatus(204)을 반환하는 것이 좋다. => sendStatus(204)=>요청이 성공했지만 반환할 데이터는 없다.)
2. OPTIONS에는 실제 요청이 사용할 메서드나 헤더들이 포함되어 있다.
3. 사전 요청에 대한 사전 응답이 돌아온다. => 이 떄 Access-Control-Allow-...등이 응답으로 들어온다.
4. 실제 요청이 전송되고 응답이 돌아온다.


6. 서버의 CORS 요청에 대한 res.setHeader 설정
1. Access-Control-Allow-Origin : 출저 허용 헤더, *(모든 출처 허용), (Http://example.com => 이렇게 특정 출처만 허용 가능)
2. Access-Control-Allow-Methods : 허용되는 메서드 설정
3. Access-Control-Allow-Headers : 허용되는 HTTP 헤더 설정
4. Access-Control-Expose-Headers : 클라이언트가 접근할 수 있는 추가적인 http 헤더를 명시
5. Access-Control-Allow-Credentials: 인증 정보를 포함한 요청을 허용할지 명시
6. Access-Control-Max-Age: : 사전 요청의 결과를 캐시할 수 있는 시간을 명시

=> 사전 요청일 떄 Access-Control-Allow-Origin과 Access-Control-Allow-Headers는 꼭 포함시켜야 응답을 반환한다.




