1. nodemon
1-1. root app 위치에서 nodemon app.js 명령어를 실행


2. MVC
Model, View, Controller를 사용하는 패턴


3. fs
3-1. fs.readFile => 파일의 전체 컨텐츠를 읽어온다.
3-2. fs.writeFile => 파일에 데이터를 추가한다.

=> fs.readFile(path, (err, fileContent)=>{ // 여기서 fileContent는 fs가 읽어온 데이터이다.
    let products = [];
    if(!err){
        products = JSON.parse(fileContent) 
        // 에러가 발생하지 않으면 현재 존재하는 파일의 데이터를 js로 바꿔서
        // products 변수에 저장한다.
    };
    products.push(this); // 그리고 나서 들어온 데이터를 추가한다.
    fs.writeFile(path, JSON.stringify(products), (err)=>{
        /// 두 번쨰 인자는 파일에 저장시킬 데이터를 의미한다.
        console.log(err)
    })
})

=> fs.writeFile, fs.readFile은 비동기 함수이기 때문에 콜백함수를 사용하든지, 프로미스나 async,await를 사용해야 한다.


4. uuid
4-1. 유니크한 키를 만들고 싶을 떄 require로 불러오고 uuid.v4()를 호출
=> string 형식의 긴 유니크한 문자열 탄생
=> 같은 키가 나올 확률은 로또 연속으로 2번




