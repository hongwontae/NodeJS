1. 요청 및 사용자 간의 데이터 공유
Node.js에서는 객체나 배열 같은 참조 유형을 exports하면 require하는 파일에서 변경하면 저절로 업데이트된다.
=> 이를 통해서 데이터를 공유한다.
=> 이렇게 되면 데이터 변동사항을 모두 공유하기 때문에 사용자의 개인정보 유출에 관한 문제가 발생한다.


2. 템플릿 엔진 - 개요
HTML 컨텐츠는 상황에 따라 해당 동적 컨텐츠를 반영하는 템플릿 엔진을 통해 서버에 생성된다.
=> 템플릿 엔진의 도움을 통해 Node 앱의 데이터에 대한 목록, 항목들은 출력할 수 있다.

Node.js에서 자주 사용하는 템플릿 엔진은 3개 정도이다. EJS, Pug, Handlebars


3. Pug 설치 및 구현
npm install --save express-handlebars
(npm install --save ejs pug)

app.set()를 통해 전체 구성 값을 설정할 수 있다.
=> Express 애플리케이션 전체에 어떤 값이든지 설정할 수 있다.
=> app.set()의 인자로 view engine은 Express에게 우리가 렌더링 하려고 하는 동적 템플릿이 있으며 이를 실시하기 위해 특별한 함수가 존재하니 등록하는 엔진을 사용해 달라고 알리는 것이며 view는 Express에게 이러한 동적 views가 어디에서 존재하는지 알리는 기능이다. views에 대한 기본값 설정은 views 폴더이다.

이제는 rendering 할 파일이 템플릿 엔진이기 떄문에 res.sendFile()이 아니라 res.render()를 사용해야 한다.
=> res.render()의 인자로는 파일명만 입력해주면 된다. 위치나 어떤 템플릿 엔진을 사용할지는 app.set()에서 설정했기 때문이다.


4. Pug 동적 컨텐츠 출력
res.render()의 두 번쨰 인자는 view에 추가되어야 하는 데이터를 전달할 수 있게 한다.
res.render('파일명', {키:vlaue, 키:vlaue})/ 템플릿 엔진에서 #{key}를 통해 value에 접근할 수 있다.


5. EJS로 작업하기 
ejs란 Embedded JavaScript의 약자로, 자바스크립트가 내장되어 있는 html이다.

ejs 템플릿 엔진에서 데이터를 수신하는 방법 => <%= key %> value가 view에 나타난다.

ejs의 if문과 for문
<%if() or for(){ %>
html...
<% }%>로 사용될 수 있다.
=는 표현식이고 =가 없다면 JS 구문를 넣어서 사용할 수 있다.


6. 부분적인 레이아웃 작업
<%- include()%> => 특정요소를 페이지에 포함할 수 있게 하고 끝에는 -기호 없이 일반 EJS 태그로 닫는다. ('')에는 포함하고자하는 파일의 경로가 들어있는 문자열을 추가해 주고 경로는 해당 파일이 속해있는 곳부터 지정한다.
ex) <%- include('includes/head.ejs') %> => 확장자까지 넣어줘야 한다.

- 대신 =를 사용하면 텍스트로 렌더링된다.


7. 정리
1. URL 요청이 와서 render 메서드가 실행되면 등록된 뷰 엔진을 찾는다.
2. app.set('view engine','ejs')에서 설정했다.
3. app.set('views', 'views')를 통해 파일의 위치한 곳을 알려준다. ('views','views'는 기본설정이라 폴더명이 views라면 이와같은 설정을 안해도 된다.)
4. render의 첫 번쨰 인자는 파일명이다. 확장자는 필요없고 만약 하위 폴더에 있다면 /를 통해 작성해야 한다.
5. 두 번쨰 인자로 템플릿에 변수로 전달되는 데이터를 가진 객체를 정의할 수 있다. 객체 전체가 전달되는 것이 아니라 pageTitle, path 같은 변수들을 사용할 수 있게 되는 것이다.


** render는 템플릿을 보낼 떄 사용하는 메서드이다!!



** ejs는 템플릿 엔진이다. app.set('view engine', 'ejs')/ app.set('views','views') => view engine으로 ejs를 사용하고 views의 위치는 views에 존재한다고 알리는 것이다. 만약 폴더명이 views라면 app.set(views, views)는 제외해도 된다.
해당 요청의 응답으로 ejs를 반환하고 싶다면 res.render 메서드를 사용해야 한다. render('filename',{ejs에서 사용할 변수})
*** ejs에 <%= %>는 변수 표현식이다./  <%- include('path') %>는 포함할 ejs이다. app.set()의 위치부터 시작한다.
























