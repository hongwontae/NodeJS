1. Express.js란?
=> Node.js  서버를 구축하는 프레임워크이다. 높은 유연성과 확장성이 장점이다.
=> 프레임워크는 어플리케이션를 구성할 떄 뼈대나 설정을 갖춘 방식을 의미한다.
=> npm install --save express
=> const express = require('express') 프레임워크가 배후에서 많은 내용을 저장하고 관리한다.

2 미들웨어란?
HTTP 요청과 응답 사이에서 단계별 동작을 수행해주는 함수이다.
Node.js의 createServer((req, res)=>{...})은 비동기 처리할 떄의 콜백이다.
app.use() 같은 미들웨어 함수는 비동기 처리 콜백이 아니다. next()를 통해 작동하는 함수이다.


3. app.use()
어떤 URL method인지는 상관없이 들어오는 요청에 대해 응답한다.


4. next()
=> 요청이 있는 다음 라인의 미들웨어로 이동시키는 메서드이다.
=> 만약 미들웨어서 응답을 한다면 next()를 사용하지 않는다. 응답이 두 개라면 오류가 발생하기 때문이다.


5. 미들웨어 작동방식
ex) app.use('/',(req, res, next)=>{res.send('<h1>Hello World</h1>')})
=> 응답 헤더는 자동으로 text/html로 설정되고 send의 인자의 html이 반환된다.


6. express.listen()
=> Express github에 가면 이전에 Node.js로 구현할 떄
cosnt server = http.createServer(....)
server.listen(3000)
=> express.listen(3000)으로 짧게 구현할 수 있도록 했다.


7. 미들웨어 사용법
app.use(path, callback, anotherCallback)
path => URL 요청 path이다. 이에 해당한 URL만 callBack를 실행한다.
callback => 요청 핸들러이다. 미들웨어라고 부른다.
만약 path를 사용했다면 /는 기본값이다. 그리고 use에서 path에서 /를 사용하면 /로 시작하는 모든 요청을 받으라는 의미이기 때문에 유의해서 사용해야 한다. => app.get, app.post 등에서 path에서 /로 시작하면 /를 제외한 요청은 받지 않는다.


8. 수신 요청 분석
res.redirect() => 리다이렉트 해주는 메서드이다.
res.body 형식으로 간단하게 받을 수는 없다. 추가적인 라이브러리를 설치하여 분석에 사용해야 한다.
=> npm install --save body parser, 현재는 기본적으로 Node.js에 존재하지만 과거에는 빠졌기 때문에 안정적으로 사용하기 위해 package.json에 명명하여 사용한다.

const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({extended : false})) => 자동으로 요청에 대한 데이터를 분석한다. 그러나 파일 데이터는 불가한다. extended : false는 비표준 대상의 분석이 가능한지에 대한 여부를 나타낸다.

9. app.methodUrl()
app.use()를 사용하면 URL 메서드를 구분하지 않는다. app.get()이나 app.post(), app.delete()등을 사용하면 자체적으로 url 메서드를 분리하여 해당하는 요청에만 미들웨어가 작동한다.


10. Express Router
파일 분리하고 싶고 URL 요청-응답에 관한 파일을 분리하고 싶다면 
1. 새로운 파일을 만든다.
2.const router = express.Router();
3. module.exports = router => 루트 Server에 보내야 하기 때문이다.
4. 이전과 같이 사용하지만 app이 아닌 router 변수를 사용해서 미들웨어를 만든다.
5. 루트 Server 파일에 require하여 사용한다.


11. 경로 필터링
같은 경로를 가지고 싶다면 app.use('admin', router); => admin를 일차적으로 확인하고 router에 가서 admin를 제외하고 확인하여 미들웨어를 반환한다.


12. HTML 페이지 서비스
파일을 회신하고 싶다면 res.sendFile() 메서드를 사용해야 한다.
다만 인자의 path는 path 코어 모듈을 사용하여 구축해야 한다.
sendFile(path.join(__dirname, '',.....))
=> 운영체제에 따라 경로를 구성하는 방식이 다른다. 윈도우는 \로 구성하고 리눅스는 /로 구성한다. join 메서드는 smart하게 운영체제를 파악하고 올바른 경로를 생성해준다. 그렇기 때문에 \/를 사용하지 않는다.
=> __dirname은 현재 디렉토리를 의미한다. 현재 파일의 폴더를 가르킨다.


13. 루트 경로 생성하기
path라는 파일을 만들고 module.exports = path.dirname(require.main.filename);를 설정한다.
=> require.main.filename는 현재 rootServer의 파일 이름을 알아내고 dirname은 파일의 폴더를 가르킨다.
=> root 경로를 가지고 있다는 것이다.
=> 이 경로가 필요한 파일은 require하여 사용하면 된다.

14. static()
파일 시스템에 직접적으로 접근하는 것은 불가능하다.
=> HTML를 반환했는데 link의 css 파일까지 사용되는 것은 불가능하다. 파일 시스템적 접근이기 때문이다.
=> 이를 해결하기 위해 express.static()를 사용할 수 있다.

만약 html이 link 태그를 통해 css를 가져와야 한다면 app.use(express.static(__dirname, 'public'))를 사용해서 반환된 html이 css를 가져오도록 허용하고 css 파일의 경로를 일부 알려준다.
=> link 태그의 href는 static의 경로 포함하여 설정하면 정적 파일 시스템 접근하여 css가 적용된 html이 반환된다.



















