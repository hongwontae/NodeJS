1. Express.js란?
=> Node.js  서버를 구축하는 프레임워크이다. 높은 유연성과 확장성이 장점이다.
=> 프레임워크는 어플리케이션를 구성할 떄 뼈대나 설정을 갖춘 방식을 의미한다.
=> npm install --save express
=> const express = require('express') 프레임워크가 배후에서 많은 내용을 저장하고 관리한다.

2 미들웨어란?
HTTP 요청과 응답 사이에서 단계별 동작을 수행해주는 함수이다.
Node.js의 createServer((req, res)=>{...})은 비동기 처리할 떄의 콜백이다.
app.use() 같은 미들웨어 함수는 비동기 처리 콜백이 아니다. next()를 통해 작동하는 함수이다.


3. app.use()
어떤 URL method인지는 상관없이 들어오는 요청에 대해 응답한다.


4. next()
=> 요청이 있는 다음 라인의 미들웨어로 이동시키는 메서드이다.
=> 만약 미들웨어서 응답을 한다면 next()를 사용하지 않는다. 응답이 두 개라면 오류가 발생하기 때문이다.


5. 미들웨어 작동방식
ex) app.use('/',(req, res, next)=>{res.send('<h1>Hello World</h1>')})
=> 응답 헤더는 자동으로 text/html로 설정되고 send의 인자의 html이 반환된다.


6. express.listen()
=> Express github에 가면 이전에 Node.js로 구현할 떄
cosnt server = http.createServer(....)
server.listen(3000)
=> express.listen(3000)으로 짧게 구현할 수 있도록 했다.


7. 미들웨어 사용법
app.use(path, callback, anotherCallback)
path => URL 요청 path이다. 이에 해당한 URL만 callBack를 실행한다.
callback => 요청 핸들러이다. 미들웨어라고 부른다.
만약 path를 사용했다면 /는 기본값이다. 그리고 use에서 path에서 /를 사용하면 /로 시작하는 모든 요청을 받으라는 의미이기 때문에 유의해서 사용해야 한다. => app.get, app.post 등에서 path에서 /로 시작하면 /를 제외한 요청은 받지 않는다.


8. 수신 요청 분석
res.redirect() => 리다이렉트 해주는 메서드이다.
res.body 형식으로 간단하게 받을 수는 없다. 추가적인 라이브러리를 설치하여 분석에 사용해야 한다.
=> npm install --save body parser, 현재는 기본적으로 Node.js에 존재하지만 과거에는 빠졌기 때문에 안정적으로 사용하기 위해 package.json에 명명하여 사용한다.

const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({extended : false})) => 자동으로 요청에 대한 데이터를 분석한다. 그러나 파일 데이터는 불가한다. extended : false는 비표준 대상의 분석이 가능한지에 대한 여부를 나타낸다.

9. app.methodUrl()
app.use()를 사용하면 URL 메서드를 구분하지 않는다. app.get()이나 app.post(), app.delete()등을 사용하면 자체적으로 url 메서드를 분리하여 해당하는 요청에만 미들웨어가 작동한다.


10. 

























