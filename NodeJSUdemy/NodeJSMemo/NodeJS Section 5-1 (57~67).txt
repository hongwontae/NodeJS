1. Express.js란?
서버로직을 전부 처리하는 코드를 만드는 것은 번거롭고 반복적이다.
비지니스 로직에 집중하고 세부적인 사항에 관해서는 구축되거나 설정되기를 원한다. => 프레임워크
어플리케이션이나 코드를 어떤 구조로 구축해야 할지 어떻게 작업해야 할 지에 대해 뚜렷하게 정의된 방식 => 프레임워크

Express.js의 대안으로 Adonis.js, KOA, Sails 등이 존재한다.
Express.js의 장점은 매우 유연하고 특별한 기능들을 과도하게 추가하지 않고 높은 확장성을 가지고 있다.

2. Express.js 설치
npm install --save express
=> 개발 뿐만 아니라 배포까지 고려하기 떄문에 --save를 사용했다.

const app = require('express') => 함수 호출로 인해 해당 프레임워크가 배후에서 많은 내용을 저장 및 관리하게 된다.
들어오는 요청을 처리하는 특정 방식을 설정하는데 이것이 바로 Express.js를 정의하며 핵심 특성이기도 하다.


3. 미들웨어 추가
Express.js는 미들웨어와 깊게 연관되어 있다. 
미들웨어의 뜻은 들어오는 요청을 express.js에 의한 다양한 함수를 통해 자동으로 이동하는 것이다.
단일 요청 핸들러를 보유하는 대신 응답을 전송하기 전까지 요청이 통과하게 될 다양한 함수들을 연결할 가능성을 확보하게 된다.

app.use() 
=> 요청 핸들러이며 3가지 인수를 받는다. req, res, next
next는 함수이고 다음 미들웨어로 요청이 이동할 수 있도록 실행되어야 한다.
next()의 호출은 다음 라인에 있는 미들웨어로 요청을 이동시키라는 뜻이다.

=> 요청이 다음 라인에 있는 미들웨어로 이동할 수 있게 하는 메서드 next();


4. 미들웨어 작동 방식
Express.js는 기본 응답을 보내지 않는다. 
응답전송을 하고 싶다면 use의 두 번쨰 인자를 사용하면 된다. next()는 필요없게 된다.

app.use((req, res, next) =>{
  res.send('<h1>Hello</h1>')
})
=> content-Type : text/html이 자동으로 설정되어 있다. Express의 기능이다. send() 메서드는 기본 기능으로 응답 헤더가 text/html이다.

=> next()를 사용해서 위에서 아래로 미들웨어의 흐름을 제어한다.


*** express는 프레임워크이다. 미들웨어 기반으로 작동한다. (함수의 연속성) app.use('paht',callbackFunc)
*** app.use('path'(req,res,next)=>{...}) res로 응답할 때는 Content-Type : text/html이 자동으로 부여된다.
*** npm install package --save => 개발+배포까지 고려한 패키지 설치


5. Express.js 백그라운드 확인
const server = http.createServer(app)
server.listen(3000)
=> app.listen(), express.js가 내부적으로 처리해준다.

send()의 기본동작은 첫 번쨰 인수에 의해 결정된다. => Express.js github에 가면 확인할 수 있다.


6. 다른 라우트 사용법
use() 메서드를 사용하는 여러 방법이 존재한다.

app.use([path], callback, [callback...])
첫 번째 인수를 통해 특정 요청만을 걸러낼 수 있다.
두 번째 인수는 콜백이고 실행해야 하는 함수이다.
콜백은 하나 이상 설정할 수 있고 다중 경로 필터를 설절할 수 도 있다.

path를 사용할 떄 '/'는 기본값이다.
만약 path를 /만 주었을 때는 /뒤에 무엇을 붙여도 접근이 가능하다. => /라는 의미가 아니라 /로 시작해야 하기 때문이다.
모든 라우트는 /로 시작한다.

하나 이상의 응답을 보내려 하면 오류가 발생하기 때문에 응답을 보낼 때는 next()를 호출하지 않는 것이 좋다.

*** /는 /로 시작하는 모든 요청에 응답한다.


*** app.use('/') => '/'로 시작하는 모든 요청에 반응한다.
*** createServer()..server.listen(4000) 로직이 app.listen(4000)으로 간결해진다.


7. 수신 요청 분석
res.redirect() => 리다이렉트한다. 다른 페이지로 이동한다.
req.body => req는 들어오는 요청의 본문을 분석하려고 하지 않는다. 또 다른 미들웨어를 추가해서 데이터를 읽어들어야 한다.

데이터를 읽는 미들웨어는 대체적으로 위로 두는데 요청이 어디로 향하든 본문 분석이 이루어지도록 하기 위해서이다.
npm install --save body parser
기본적으로 Express에 포함되어 있다. 과거에 포함되어 있다가 빠졌다가 다시 추가되었다. => 이후에 해당 패키지가 이탈하더라도 코드를 사용하기 위해 설치한다.

app.use(bodyParser.urlencoded(extneded: false))
=> 자동으로 미들웨어에 들어오는 요청 본문을 해석한다. 다만 파일같은 특정 데이터는 불가하다. 다른 패키지를 사용하면 된다. 
=> extended : false, 비표준 대상의 분석이 가능한지를 나타낸다.


8. Post 요청으로 미들웨어 실행 제한
form를 통해 오는 http 메서드가 get이든 post이든 모두 받는다. => Post 한정으로 받고 싶다면?
app.get(), app.post()처럼 get이나 post 요청에만 작동하게 쓸 수 있다.

들어오는 모든 요청을 받는 app.use()보다 제한적인 요청을 받을 수 있도록 app.get()/ app.post()/ app.delete()..를 사용할 수 있다.


** res.redirect() => 리다이렉트한다.
** res.body => 그냥 본문을 받을 수 없다. body-parser라는 패키지를 가져와야 한다.
** app.use(bodyParser.urlencoded({extended : false}))를 사용하면 res.body의 내용을 가져올 수 있다.
** app.use가 무분별하게 받아오지 않게 app.get()/ app.post를 사용하여 해당 url method에만 반응하게 할 수 있다.


9. Express 라우터 사용
하나의 파일에만 로직을 담지 않고 여러 파일로 내보내서 import - require를 사용한다.
Express.js 라우팅을 다른 파일에 위탁하는 방법을 사용한다.

1. 라우팅 폴더를 생성한다. (이름은 관례에 따라 routes를 생성한다.)
=> 해당 폴더에 http 메서드 요청과 관련된 로직이 담겨있다.

2. 파일을 생성하고 const router = express.Router()를 작성한다.

3. 해당 router 변수를 module.exports = router로 내보낸다. => 서버가 있는 파일에 전달하기 위해서

4. router.use(), router.get()를 통해 요청과 응답을 하는 미들웨어를 생성한다.

5. 루트 파일에 router를 require하고 해당 router는 app.use(router);를 전달한다.
=> 예전과 다를 것 없이 실행된다.


* get이나 post를 미들웨어의 메서드로 사용했다면 이때부터는 '/'는 여기부터 시작하는 경로가 아닌 정확히 '/'에만 해당된다.


10. 404 오류 페이지 추가
app.use()에서 경로를 설정하지 않으면 위에서 해당되는 미들웨어가 없기 떄문에 온것으로 잘못된 연결은 해당 미들웨어에 도착한다. 
res.send()로 오류 페이지를 작성하고 404 상태 코드를 설정한다.
=> res.status().send(html);
=> 응답 전에는 항상 status나 setHeader를 호출할 수 있다.
=> 페이지를 찾을 수 없는 경우의 일반적인 코드인 404로 설정하자
=> status()의 상태 코드는 원하는 숫자를 넣을 수 있다.


11. 오류 페이지
app.use()를 사용하여 모든 오류 접근을 맡는다.
res.status => 상태코드


** const router = express.Router()를 사용해서 app.use()의 요청 핸들러의 역할을 맡을 수 있다.
   => 이 떄 파일을 분리하여 사용할 수 있다.
  => app.use('path'routerFunc) 이 떄 routerFunc의 별개의 모듈에서 가져올 수 있다.
   => router.get(post, delete)를 사용할 수 있다.
** 404 error page => app.use()를 통해 실패한 url 요청을 받아서 처리할 수 있다.
    => res.status => 상태코드 전송





























