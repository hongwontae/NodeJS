1. Express.js란?
서버로직을 전부 처리하는 코드를 만드는 것은 번거롭고 반복적이다.
비지니스 로직에 집중하고 세부적인 사항에 관해서는 구축되거나 설정되기를 원한다. => 프레임워크
어플리케이션이나 코드를 어떤 구조로 구축해야 할지 어떻게 작업해야 할 지에 대해 뚜렷하게 정의된 방식 => 프레임워크

Express.js의 대안으로 Adonis.js, KOA, Sails 등이 존재한다.
Express.js의 장점은 매우 유연하고 특별한 기능들을 과도하게 추가하지 않고 높은 확장성을 가지고 있다.

2. Express.js 설치
npm install --save express
=> 개발 뿐만 아니라 배포까지 고려하기 떄문에 --save를 사용했다.

const app = require('express') => 함수 호출로 인해 해당 프레임워크가 배후에서 많은 내용을 저장 및 관리하게 된다.
들어오는 요청을 처리하는 특정 방식을 설정하는데 이것이 바로 Express.js를 정의하며 핵심 특성이기도 하다.


3. 미들웨어 추가
Express.js는 미들웨어와 깊게 연관되어 있다. 
미들웨어의 뜻은 들어오는 요청을 express.js에 의한 다양한 함수를 통해 자동으로 이동하는 것이다.
단일 요청 핸들러를 보유하는 대신 응답을 전송하기 전까지 요청이 통과하게 될 다양한 함수들을 연결할 가능성을 확보하게 된다.

app.use() 
=> 요청 핸들러이며 3가지 인수를 받는다. req, res, next
next는 함수이고 다음 미들웨어로 요청이 이동할 수 있도록 실행되어야 한다.
next()의 호출은 다음 라인에 있는 미들웨어로 요청을 이동시키라는 뜻이다.

=> 요청이 다음 라인에 있는 미들웨어로 이동할 수 있게 하는 메서드 next();









































