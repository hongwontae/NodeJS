1. NPM 스크립트의 이해
NPM이란 노드 패키지 매니저를 의미하며 NODE.js 내부에 함께 설치되어 있다. 
NPM를 사용하면 노드 프로젝트라고 부르는 작업의 초기 내용을 설정할 수 있다.

npm init => 노드 패키지를 사용하기 위해 package.json를 생성하겠다.
package.json => 현재 프로젝트에 관한 정보와 패키지 매너저를 통해 설치한 모듈들의 의존성을 관리하는 파일이다.

의존성 모듈을 설치하게 되면 dependencies안에 해당 모듈의 버전과 이름이 추가된다.

package.json의 scripts 키
빌드, 실행 등에 사용되는 명령어를 선언하거나 패키지의 install, publish 전/후에 실행되는 스크립트 명령어를 선언할 때 사용된다.
일반적으로 "key" : "HWT", npm run key => key이 내용이 실행된다.
다만 start 같은 키워드는 터미널에 start만 넣어도 value가 실행된다. => 지정된 키워드가 존재한다.


2. 제 3자 패키지 설치하기
Node.js에 존재하지 않은 기능들을 가져오기 위해 제 3자 패키지를 다운하여 사용한다.
NPM 저장소는 모든 패키지들이 저장된 클라우드 패키지 저장소를 통해 사용할 수 있으며 이 패키지들은 노드와 함께 제공되는 도구인 npm을 사용하여 간편하게 설치하거나 관리할 수 있다.

nodemon => 자동 재시작해주는 패키지이다.
nodemon은 개발 과정에서만 사용하기 때문에 개발 의존성이다.
이를 package.json에 알리기 위해서는 npm install 패키지이름 --save-dev => 단순히 개발 도중 사용하는 것임을 알린다.
이렇게 되면 devDependencies 키의 value로 들어간다.

npm install 패키지명 -g => 프로젝트에는 설치하지 않겠지만 머신 전체에 설치하여 어디에서든지 사용할 수 있도록 한다.
=> 전역으로 만든다.

npm install를 단독으로 사용하면 package.json에 언급된 모든 패키지를 검색하여 설치한다.

dependencies에 파일들은 node_modules에 설치되어 있다.
하나만 설치했지만 node_modules가 방대한 이유는? => 해당 패키지가 피어(peer) 의존성 몇 개를 포함하기 때문이다.


package-lock.json
npm을 사용해서 node_modules 트리나 package.json 파일을 수정하게 되면 자동으로 생성되는 파일이다.
이 파일은 파일이 생성되는 시점의 의존성 트리에 대한 정확한 정보를 가지고 있다.

package.json에는 version-range가 사용된다. 특정 버전이 아니라 버전의 범위를 의미한다. => package-lock.json이 없다면 자동으로 패키지들이 업데이트하고 이 업데이트 패키지들이 오류를 일으킬 수 있다.
=> package-lock.json 파일은 의존성 트리에 대한 정보를 가지고 있으며 package-lock.json 파일이 작성된 시점의 의존성 트리가 다시 생성될 수 있도록 보장한다.


3. 자동 재시작을 위한 nodemon 사용
nodemon => 노드 애플리케이션을 실행하고 파일들이 변경 내역을 확인하고 뭔가를 변경하는 경우 프로세스를 재시작시킨다.
터미널에 nodemon app.js를 실행하면 오류가 발생한다. => 일반적으로 터미널의 명령은 전역을 고려하기 때문이다.
package.json를 통해 명명해주어야 터미널이 로컬을 참조한다.

명령 프롬프트는 npm run start(scripts key name)를 실행해야 한다.


4. 다양한 오류 유형 이해

Types of Errors
1. 구문 오류
Syntax Errors를 의미한다.
2. 런타임 오류
Runtime Errors
3. 논리적 오류


5. 구문 오류 찾기 및 수정
구문 에러는 터미널에서 오류 메시지가 나타난다. => 해당되는 에러가 어디서 발생했는지를 알려준다.
Unexpected Token이나 Unexpected Syntax라는 에러 메시지와 함께 에러 발생 지역을 표시해준다.


6. 런타임 오류 처리
구문 에러가 없었기 때문에 터미널에서 노드가 실행되지만 결과물은 에러가 나오고 그 결과 터미널에 에러가 발생한다.


7. 논리 오류
에러 메시지가 발생하지 않는다. => 잘못된 코드로 인해 로직이 붕괴한 것이다. (1이 나와야하는데 2가 나온 경우를 의미한다.)
=> 이를 해결하기 위해서 vsCode의 디버깅을 이용한다.

view => run => Run and Debug => Node.js를 선택한다.
중단점을 이용해 코드 진행상황을 살펴볼 수 있다.
중단점은 코드 라인 번호 왼쪽에 선택할 수 있으며 중단점이 실행되고 프로그램이 실행되면 중단점에서 코드 실행을 멈추고 결과를 반환한다.

debugger에서는 중단점까지의 코드 결과를 세밀하게 보여준다. 변수, callStack, BreakPoints 등등..


8. 디버거 사용
디버거를 실행한 이후 디버거 콘솔에는 중단점까지의 코드 실행으로 인한 결과물을 검색할 수 있다.


9. 앱 편집 후 자동으로 디버거 재시작하기






























