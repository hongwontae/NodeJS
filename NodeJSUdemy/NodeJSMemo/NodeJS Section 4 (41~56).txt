1. NPM 스크립트의 이해
NPM이란 노드 패키지 매니저를 의미하며 NODE.js 내부에 함께 설치되어 있다. 
NPM를 사용하면 노드 프로젝트라고 부르는 작업의 초기 내용을 설정할 수 있다.

npm init => 노드 패키지를 사용하기 위해 package.json를 생성하겠다.
package.json => 현재 프로젝트에 관한 정보와 패키지 매너저를 통해 설치한 모듈들의 의존성을 관리하는 파일이다.

의존성 모듈을 설치하게 되면 dependencies안에 해당 모듈의 버전과 이름이 추가된다.

package.json의 scripts 키
빌드, 실행 등에 사용되는 명령어를 선언하거나 패키지의 install, publish 전/후에 실행되는 스크립트 명령어를 선언할 때 사용된다.
일반적으로 "key" : "HWT", npm run key => key이 내용이 실행된다.
다만 start 같은 키워드는 터미널에 start만 넣어도 value가 실행된다. => 지정된 키워드가 존재한다.


2. 제 3자 패키지 설치하기
Node.js에 존재하지 않은 기능들을 가져오기 위해 제 3자 패키지를 다운하여 사용한다.
NPM 저장소는 모든 패키지들이 저장된 클라우드 패키지 저장소를 통해 사용할 수 있으며 이 패키지들은 노드와 함께 제공되는 도구인 npm을 사용하여 간편하게 설치하거나 관리할 수 있다.

nodemon => 자동 재시작해주는 패키지이다.
nodemon은 개발 과정에서만 사용하기 때문에 개발 의존성이다.
이를 package.json에 알리기 위해서는 npm install 패키지이름 --save-dev => 단순히 개발 도중 사용하는 것임을 알린다.
npm install 패키지명 -g => 프로젝트에는 설치하지 않겠지만 머신 전체에 설치하여 어디에서든지 사용할 수 있도록 한다.
=> 전역으로 만든다.

npm install를 단독으로 사용하면 package.json에 언급된 모든 패키지를 검색하여 설치한다.

dependencies에 파일들은 node_modules에 설치되어 있다.
하나만 설치했지만 node_modules가 방대한 이유는? => 해당 패키지가 피어(peer) 의존성 몇 개를 포함하기 때문이다.


package-lock.json
npm을 사용해서 node_modules 트리나 package.json 파일을 수정하게 되면 자동으로 생성되는 파일이다.
이 파일은 파일이 생성되는 시점의 의존성 트리에 대한 정확한 정보를 가지고 있다.

package.json에는 version-range가 사용된다. 특정 버전이 아니라 버전의 범위를 의미한다. => package-lock.json이 없다면 자동으로 패키지들이 업데이트하고 이 업데이트 패키지들이 오류를 일으킬 수 있다.
=> package-lock.json 파일은 의존성 트리에 대한 정보를 가지고 있으며 package-lock.json 파일이 작성된 시점의 의존성 트리가 다시 생성될 수 있도록 보장한다.



















