1. MVC(Model View Controller)
MVC => 코드의 여러 부분들이 각기 다른 기능을 가져서 어떤 작업을 책임지고 있는지 확실히 파악하기 위한 구조나 설계

Model은 기본적으로 객체나 데이터를 나타내는 코드의 한 부분으로 데이터를 저장하거나 파일로부터 데이터를 주고받는 등 데이터 관련 작업을 할 수 있도록 한다.
Views는 사용자가 보게 되는 화면을 책임진다.
Controller는 모델과 뷰 사이의 연결점이다. 컨트롤러가 모델과 함께 데이터를 저장하거나 저장 프로세스를 유발한다. 뷰에서 가져온 데이터를 전달하는 것도 컨트롤러가 한다.

Routes는 경로와 URL 메서드를 구분해서 어떤 컨트롤러 코드를 실행할지 정의한다.

컨트롤러는 미들웨어 기능 간에 분할된다. 일부 논리가 분리되어 다른 미들웨어 기능으로 이동하는 것이다.

=> 라우터의 함수를 뺴서 모듈로 불러와 사용할 수 있다. 이 떄 컨트롤러가 응답을 맡는 것이다. 라우터는 위치만 잡아준다.


2. 컨트롤러 추가하기
데이터를 다루고 뷰를 반환하는 것이 컨트롤러를 구성하는 중간 논리(In-between-Logic)이다.
=> 이미 구성되어 있지만 요청을 받는 파일과 컨트롤러 로직을 담당하는 파일로 분리시키는 것이 가독성이나 파일크기의 효율에 도움이 된다.

컨트롤러 파일은 render하는 함수를 exports하고 라우트 하는 파일은 require해서 그 함수를 사용한다.

파일을 내보낼떄는 .표기법을 이용해서 내보내야 한다. => 하나만 내보내는 것이 아니기 때문이다.

** exports한 파일에서 데이터 처리를 했고 다른 파일에서 이를 사용해도 데이터는 그대로 보내지고 유지된다.


3. 제품 모델 추가하기
데이터 처리 => 모델
URL 응답 요청 처리 => 컨트롤러

데이터 처리하는 로직은 models 폴더의 파일에서 생성하고 Class를 사용해서 생성한다.
=> 이 Class를 module.exports를 통해서 내보내고 컨트롤러에서 객체를 생성해서 사용한다. (Spring의 서비스 느낌)


4. 모델을 통해 파일에 데이터 저장하기
fs와 path를 이용해서 데이터를 가져오고 저장한다.
=> 구축하고 싶은 로직은 URL POST 요청이 들어오면 요청 데이터를 저장하고 파일에 적고 이를 유지하는 것이다.

** fs module
fs 모듈은 동기와 비동기 API를 모두 지원하고 있다. 동기 메서드로 끝나는 이름은 Sync로 끝나서 판단하기 쉽다.
readFile(path, callback(err, fileContent)=>{...})
writeFile(path, content, (err)=>{...} )
























