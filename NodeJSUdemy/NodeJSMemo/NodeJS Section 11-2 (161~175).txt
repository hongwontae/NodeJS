1. 사용자 모델 생성하기
=> 이전과 같은 Product 모델처럼 User라는 모델을 생성한다.


2. 일대다 관계 추가하기
관계 설정 (Associations)
=> 일대다, 일대일, 다대다 같은 관계설정을 존재한다. Sequelize를 통해 이 관계도 설정할 수 있다.

루트 파일에 각 모델들을 불러와서 sequelize를 동기화하기 전에 관계를 정의하면 된다.

Product.belongsTo(User, {constraints : true, onDelete : 'CASCADE'});
=> Product는 User에 속한다.
=> 사용자가 삭제되었을 떄 해당 상품도 삭제한다. => onDelete : 'CASCADE'
-> products 테이블에 외래키를 설정하겠다. 
User.hasMany(Product)
=> 사용자가 많은 제품을 지니고 있는 것을 정의/ 일대다

=> 이렇게 정의하면 sequelize.sync는 테이블을 생성하고 관계들을 db 내부에 정의해 준다.

=> 강제적으로 테이블을 재실행하고 싶다면 동기화하는 sequelize.sync({force : true})를 줘야한다.


3. 더미 사용자 생성 및 관리하기
미들웨어는 들어오는 요청에 대한 반응이다. => 루트 파일에서 실행되는 모델 관계 설정이나 동기화설정은 자동으로 이루어진다. => app.listen(호스트 번호)가 호출이 되어야 미들웨어는 작동할 수 있다.

데이터베이스에서 검색하는 사용자는 db에 있는 값을 포함하는 JS 객체가 아니다.

app.use((req, res, next)=>{
 User.findByPk(1).then(user => {
   req.user = user;
})
})
=> 요청 객체에 새 필드를 추가해 줄 수 있다. 본문을 비롯한 기존의 다른 필드들을 덮어쓰는 것만 조심하면 된다.
=> 이렇게 가져온 값 user는 DB 값을 포함하는 sequelize 객체이다.


4. 관계 설정 메서드 사용하기
app.use() => 이것만 존재하면 모든 요청에 대한 응답을 내보낸다.
** Model를 불러와서 쿼리 메서드를 사용한 결과값은 값 뿐만 아니라 sequelize 객체로써 메서드도 가지고 있다.
=> 데이터베이스 데이터 + 헬퍼 메서드

관계 설정하면 관계 설정 종류에 따라 sequelize가 특별한 메서드를 추가한다.
belongsTo 연관관계의 경우 새로운 관련 객체를 생성할 수 있는 메서드 등을 추가한다.
=> User에게 createProduct이라는 메서드를 자동으로 부여한다.
=> User 하나에 여러개의 Product가 존재하기 때문에 User의 sequelize 데이터는 createProduct가 자동으로 부여된다.
=> 해당 메서드는 해당 User의 Products를 추가하는 메서드이다.


























