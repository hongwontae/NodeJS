1. 응답 전송
res 객체는 나가야할 응답에 대한 정보를 담고 있다.
res.setHeaders(1,2) => 첫 번쨰 인자는 헤더를 설정한다. 두 번쨰 인자는 헤더의 데이터 종류를 설정한다.
=> ('Content-Type','text/html')
=> 헤더를 설정하지 않으면 브라우저가 데이터 양식을 이해하지 못해서 오류가 발생한다.
res.write() => 데이터를 담을 수 있다. 서블릿처럼 write를 연속으로 사용하여 HTML를 구성한다.
res.end() => 응답의 생성이 끝난 뒤에는 노드에게 알려야 한다. 메서드가 호출된 다음의 코드는 오류가 발생한다.


2. 라우터 요청
<form> 태그의 속성
action => 전송할 서버의 url
methid => 전송될 http method

<input>의 속성
name => 보내는 데이터의 키역할을 한다고 보면 된다.

form 태그의 button의 type이 submit이라면 자동으로 input의 데이터가 서버로 전송되고 페이지가 새로고침된다.
form 태그로 인해 전송된 모든 것은 문자열 형식으로 req가 받는다.


3. 요청 리디렉션
req에서 받는 모든 정보는 String이다.
응답을 확인하기 위해 응답이 들어오면 file를 생성하고 statusCode = 302와 headers(Location,/)를 설정한다.
=> 파일이 생성되고 다시 /로 돌아온다.


4. 요청 본문 분석

Stream and Butter
스트림은 지속적인 프로세스이다. 노드가 요청을 한 청크 단위로 읽는다. 다 읽고 나면 이때부터 요청 전체를 읽기까지 기다리지 않고도 각각의 청크를 다룰 수 있다. 하지만 코드를 사용해 청크를 마음대로 다룰 수는 없다.

청크를 체계화하기 위해 버퍼를 이용한다. 버퍼는 여러 개의 청크를 보유하고 파싱이 끝나기 전에 작업할 수 있도록 한다.

req.on('data') => 특정 이벤트 리스너를 등록할 수 있다. 이벤트 트리거 data는 새 청크가 읽힐 준비가 될 떄마다 데이터 이벤트가 발생하는데 버퍼가 도움을 준다.

req.on('end') => 들어오는 요청 데이터 혹은 전반적인 요청을 분석한 후에 발생한다.

* 이벤트 핸들러나 이벤트 리스너는 addEventListener('click',func(){}) 전체를 의미하는 것이다.


5. 이벤트 기반 코드 실행의 이해
Node.js는 콜백함수를 비동기처리한다. => 콜백함수가 무조건 비동기처리되는 함수는 아니지만 Node.js는 대부분 콜백함수는 비동기처리된다.
Node.js는 이벤트 리스너를 만나면 내부적으로 등록한 후 관리한다.


6. 블로킹 및 논블로킹 코드
fs.writeFileSync => 동기화 코드이다. 파일이 쓰여질 떄까지 모든 코드 진행을 막는다. 
비동기 처리는 Node.js가 멀티 스레딩을 사용하는 운영체제에 전달하며 이벤트 콜백을 파악하기 위해 이벤트 루프를 계속하면서 코드 실행을 원활히 하고 운영체제에서 작업이 끝난 뒤에는 메인쓰레드에 전달한다.


7. NodeJS 백그라운드 확인
Node.js는 하나의 쓰레드만 사용한다. => 싱글쓰레드로 프로그램이 실행된다.
쓰레드 => 운영체제에서의 프로세스이다.

이벤트 루프는 Node.js가 시작하면 프로그램에 의해 자동으로 시작된다.
=> 이벤트 루프는 이벤트 콜백을 다룬다.
이벤트가 발생하면 이벤트 루프가 콜백를 실행한다.

파일 시스템같은 시간이 오래걸리는 작업은 워커풀(worker pool)에 보내진다.
=> Node.js가 알아서 관리한다.
워커풀은 JS 코드로부터 완전히 분리되어 여러 쓰레드에서 작동할 수 있고 앱을 실행하는 운영체제와 연관이 있다.
코드로부터 분리되었기 때문에 무거운 작업을 처리할 수 있는 것이다.
무거운 작업을 실행하면 워커풀의 워커는 코드, 요청 및 이벤트 루프와 분뢰된 상태에서 작업을 수행한다.
그러나 이벤트 루프와는 한 가지 연결점이 존재한다.
파일 읽기 작업을 워커풀이 끝내면 읽기 파일 연산에 대한 콜백이 시작되는데 이 시점에 이벤트 루프에 들어가게 된다.

이벤트 루프란 Node.js에 의해 실행되어 Node.js를 계속 실행하도록 하는 루프로 모든 콜백을 처리한다.
콜백을 처리하는 일정한 순서가 있다. 
새로운 반복이 시작될 때마다 실행해야 하는 타이머 콜백이 있는지 확인한다. 
다음으로 다른 콜백을 확인한다. I/O와 관련된 작업(파일 연산, 네트워크 연산 등을 의미한다.)
후에 처리되지 않은 콜백이 너무 많이 있다면 루프 반복을 이어가는 대신 남은 콜백을 다음 반복에서 실행하도록 미룬다.
다음으로 Poll 단계에 진입한다. Poll 단계에서는 Node.js가 새로운 I/O 이벤트를 찾아 빠르게 이벤트의 콜백을 실행하도록 한다. 가능하지 않다면 실행을 미루고 대기 콜백으로 등록한다.
다음으로 Check 단계에서는 setImmediate 콜백이 실행된다. 
다음으로 Close Callbacks가 실행된다.
다음으로 프로그램을 종료한다. 그전에 등록한 이벤트 핸들러가 남지 않았는지 확실히 해야 한다.

createServer로 listen()을 통해 들어오는 요청을 듣는 이벤트들은 기본으로 절대 끝나지 않는 이벤트이다. refs는 항상 1이다.


8. Node 모듈 시스템 사용
파일 분리하여 코드를 사용하고 싶다면 각 파일을 로직에 맞게 연결시켜야 한다.
이때 내보내는 구문은 두 개이다.
1. module.exports = ...
=> Node.js에 의해 전역으로 노출된 키워드로 내보내기 속성이 있어서 변수나 상수 함수를 할당하면 module.exports에 저장된다.
받을 떄는 require 구문을 사용해서 받는다. const routes = require('./routes')
=> 인자에는 주소와 파일명을 넣는다.
=> 이 등록된 함수는 외부에서 절대로 접근할 수 없다.
=> 이렇게 설정하면 하나밖에 사용할 수 없다.

2. module.exports ={}
키-값 형태로 값을 여러개 넣어서 사용할 수 있다. 받을 떄는 변수명.키로 접근한다.

ex) module.exports = {
  key : value,
  key : value
}

const income = require(key);
key.value


3. module.exports.키 = value/ exports.키 = value
=> 이렇게 사용하면 여러개를 내보낼 수 있다.
=> 받을 떄는 2와 마찬가지로 받아서 사용하면 된다.
=> exports.키 = value는 축약문이다.

** 받는 것은 모두 const 변수명 = require(./ or module name);
=> ./는 파일을 받을 떄 주소를 적는 것이다.


** module.exports = value
** module.exports.key = value
** module.exports = {key : value, key : value}



















