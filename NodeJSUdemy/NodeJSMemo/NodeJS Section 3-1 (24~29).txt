1. 웹 작동 방식
URL를 입력하여 웹 페이지에 접근한다. => 이 URL은 서버의 실제 주소에 해당하지는 않는다. 해당 주소를 사람이 읽을 수 있도록 인코딩한 버전이다. 정확히는 서버는 IP 주소를 가지고 있다. 이 IP 주소를 가지고 클라이언트와 서버는 서로 요청하고 응답한다.

위의 서버를 구성하는 언어 중 하나가 Node.js이다.

요청과 응답 전송이 일부 프로토콜, 즉 표준화된 소통 방식을 통해 이뤄진다.
=> 이를 HTTP(S) 프로토콜이라 한다.
=> 유효한 요청이 어떤 형태를 지니고 어떤 데이터가 브라우저->서버, 서버->브라우저로 전송되어야 할지 정의한다.

Hyper Text Transfer Protocol (Secure)

Node.js는 단순히 자바스크립트 실행환경이다. => 프레임워크나 라이브러리가 아니다.
프레임워크 => 프로그램의 구조의 설계가 이뤄진 것을 의미한다.


2. Node 서버 생성

core modules
1. http => 서버를 생성하거나 요청을 전송하는 모듈
2. https => SSL server를 생성하는 모듈

Node.js의 모듈을 사용하려면 해당 모듈을 불러오는 구문을 작성해야 한다.
cosnt 변수명 = require('모듈명');

http 모듈
cosnt server = http.createServer(callbackFunc)
=> 서버를 생성하고 들어오는 요청에 대하여 인자로 받은 함수가 처리해준다.
=> 이 같은 방식을 이벤트 드리븐 아키텍처(EDA)라고 부른다.
=> 서버를 생성하고 변수에 저장해야 한다. 그래야 서버를 특정할 수 있다.

server.listen()
=> Node.js가 스크립트를 바로 종료하지 않고 계속 실행되면서 요청을 받아들이게 한다.
=> listen의 첫 인자는 포트이다.

서버에 간단히 요청을 보내려면 브라우저에서 url로 localhost:3000 접근하면 된다.
=> createServer의 callback 함수가 작동한다.

=> Node.js가 작동하는 방식은 이벤트 리스너를 등록해놓고 이벤트가 발생하면 비동기 방식으로 함수를 실행시키는 것이다.


3. Node의 라이프사이클 및 이벤트 루프
터미널에서 node 파일명.확장자를 작성하면 script가 node.js에서 실행되고 코드를 분석한 후 변수와 함수를 등록한다.
이 과정에서 프로그램이 종료되지 않았다. => 이벤트 루프 떄문이다.

Node.js가 관리하는 이벤트 루프는 이벤트 리스너가 있는 한 계속 작동한다.
Node.js 또한 싱글 쓰레드 JS를 실행한다. 전체 노드 프로세스가 하나의 스레드를 사용한다.
이벤트 루프를 종료하려면 process.exit();를 실행하면 된다.

process.exit()은 이벤트 루프를 종료해 프로그램을 종료시킨다.

Node.js 또한 비동기 작업을 이벤트 루프라는 속성을 이용해서 처리한다.


** Node.js의 이벤트 루프
I/O 작업 => 입출력 작업
런타임 => 프로그램이 실행되는 동작을 런타임이라고 한다. 프로그래밍 언어가 구동되는 환경을 의미한다.
Node.js는 하나의 스레드로 작동하지만 이벤트 루프를 통해서 여러 비동기 작업들을 블로킹 없이 수행한다.

Node.js는 c++로 작성된 런타임이다. 그 내부에 v8 엔진과 libuv 라이브러리가 존재한다.
libuv란 node.js가 사용하는 비동기 I/O 라이브러리이다. 운영체제의 커널을 추상화한 Wrapping 라이브러리로 커널이 어떤 비동기 API를 지원하는지 알고있다.

=> 이밴트 핸들러는 이벤트가 발생했을 떄 실행하는 함수를 의미한다. 이벤트 리스너는 onClick이나 onChange 같이 이벤트 트리거를 의미하는데 이벤트 핸들러와 이벤트 리스너를 혼용해서 부르기도 한다.

4. 요청의 이해
createServer의 콜백은 요청에 대한 응답을 설계하는 함수이다. 두 개의 인자를 받는데 첫 번쨰 인자는 들어온 요청에 대한 정보, 두 번쨰 인자는 나갈 응답에 대한 정보를 담고 있다. 변수명은 req, res로 보통 짓는다.

req.url => 호스트 다음에 붙은 모든 주소이다. String이다.
req.method => 요청에 대한 HTTP method (url 브라우저에 단순히 입력하는 경우 get 메서드가 기본이다.)
req.headers => 요청 헤더이다.





























