1. 데이터베이스 선택하기 and SQL
SQL 데이터베이스는 테이블이라는 요소를 통해 사고한다.
SQL 데이터베이스는 스키마 데이터 형식에 맞는 데이터가 들어가야 한다.
SQL 데이터베이스는 관계형 데이터베이스이다. One-to-One, Many-to-One, Many-to-Many

SQL Query는 데이터베이스 보내는 명령어이다.

스키마 => DB내에 어떤 구조로 데이터가 저장되는가를 나타내는 데이터베이스 구조

2. NoSQL
NoSQL은 SQL 방식을 따르지 않는다는 것이다.
NoSQL에서 테이블을 집합이라고 부른다.

NoSQL는 엄격한 스키마가 없다.
NoSQL에는 실제 상관관계(Data Relations)가 존재하지 않는다. 대신 데이터를 복사한다.


3. SQL과 NoSQL 비교하기
애플리케이션 커지면 DB를 확장해야 한다. 데이터베이스를 확장할 떄 사용하는 두 가지 방법으로 수평 및 수직 스케일링이 존재한다.

수평 스케일링
서버를 더 추가한다.

수직 스케일링
존재하는 서버에 CPU나 메모리 등을 추가하여 더 강력하게 DB를 구성하는 것을 뜻한다.

SQL은 데이터 스키마를 강력히 따르고 Relations가 존재한다.
수평 스케일링이 어렵거나 불가능한 경우도 존재한다.
데이터를 테이블 전반에 걸쳐 분할하여 저장하든가, 강력한 스키마가 보유되길 원하고 자주 데이터 변동이 일어나지 않는 경우 SQL이 좋다.

NoSQL은 스키마가 없고 상관관계도 거의 없다.
NoSQL은 수평 스케일링이 SQL보다 쉽다. => 연결 수가 적기 때문이다.
데이터가 자주 변경되는 경우 NoSQL이 쉽다.


4. 앱을 SQL 데이터베이스에 연결하기
노드 내부에서 SQL를 사용하거나 상호작용하려면 패키지가 필요하다.
=> npm install --save mysql2

데이터베이스와 nodeJS를 연결 후 쿼리를 작성해야 한다.
쿼리를 완료한 다음에는 항상 연결을 닫아야 한다.
=> 한번 명령을 보내기 위해 통로를 열고 닫는 것은 비효율적이다.

단일 연결이 아니라 커넥션 풀을 통해 실행할 쿼리가 있을 때마다 항상 활용하면 좋다.

ex) const pool = mysql.createPool({
  host : 'localhost',
  user : 'root',
  database : 'node-complete',
  password : '1234'
})

module.exports = pool.promise();
=> 비동기처리를 동기적으로 하기 위해서 

위 파일을 사용하기 위해서 require 구문을 통해 가져오면 풀 역할을 하는 객체를 통해 내부의 연결을 사용한다.


5. 데이터 검색
promise()를 활용해서 SQL과 Node를 연결하는데 도움을 받는다.

db.excute('select * from products').then((result)=>{
 console.log(result)
}).catch(...)

=> 쿼리의 결과는 중첩된 배열을 지닌 배열 형태이다
=> 첫 번째 중첩배열의 결과는 쿼리의 데이터
=> 두 번쨰 중첩배열의 결과는 테이블에 관한 메타 데이터이다.


6. 제품 가져오기
파일이 아닌 데이터베이스로부터 데이터를 가져오고 싶다.
database.js node 파일에서 module.exports = pool.promise()를 하면 pool를 사용할 파일들은 promise 구문을 사용할 수 있다. => 비동기적 처리를 안전히 처리하고 체계적으로 처리한다.

fetchAll()이 이제 db에 접근해서 데이터를 가져오는 구문으로 바뀐다.
=> return db.excute('select * from products');
=> 이 리턴된 값들은 then()의 인자 값에 넣어진다.
=> then(([data, metaData])=>{res.render(...,{...})})을 사용해서 데이터 베이스에서 가져온 값들을 동적으로 사용한다.


7. 제품 가져오기-2






































