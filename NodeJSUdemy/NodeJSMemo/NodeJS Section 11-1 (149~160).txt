1. Sequelize란?
Object-Relational Mapping Library이다.
백그라운드에서 실제로 SQL 코드를 처리하며 JS 객체로 맵핑해 SQL 코드를 실행하는 편리한 메서드를 재공하기 떄문에 SQL 코드를 직접 작성하지 않아도 된다.
=> Sequelize로 db에 접근해서 js 객체 형태로 값을 반환한다.
=> Sequelize로 JS 객체를 생성하면 테이블을 생성한다.
=> 양방향
=> Sequelize model 생성 => 해당 모델을 기반으로 한 객체를 생성 => 해당 객체 메서드를 사용하여 쿼리 사용 or 관계 설정

객체가 Sequelize에 의해 DB에 매핑되면 테이블을 자동으로 생성한다. 테이블뿐만 아니라 관계까지 자동으로 설정한다.
=> 객체를 명령하면 Sequelize가 백그라운드에서 sql 명령을 실행한다.

Seque는 데이터베이스를 다루는 모델을 제공하고 모델을 정의한다.


2. 데이터베이스에 연결
Sequelize 설치 => npm install --save sequelize
Sequelize는 MySQL2 패키지를 필요로 한다.

sequelize는 생성자 함수이다. new 연산자를 통해 객체를 생성한다.
이 떄 인자의 값으로 db이름, username, password, {options}를 준다.

{dialect : 'mysql', host : 'localhost'} => dialect=> mysql 문법을 사용하겠다.

=> 이렇게 구성되면 Sequelize 환경으로 구성된 커넥션 풀이 존재하는 것이다.


3. 모델 정의
Sequelize class와 sequelize 커넥션 풀을 가져오면 Sequelize가 관리할 모델을 정의할 수 있다.

sequelize.define() 
=> 새 모델을 정의한다. 첫 번쨰 인자는 모델 이름(소문자 규율), 두 번쨰 인자는 모델의 구조를 정의한다. 자동으로 생성할 데이터베이스 테이블을 정의한다. js 객체로 구성한다. 제품들이 가지는 속성이나 필드를 정의하면 된다.

ex) {
  id : {
   type : Sequelize.INTEGER,
   autoIncrement : true,
    allowNull : false,
    primaryKey : true
}
title : Sequelize.STRING
}
=> define의 두 번째 인자는 객체형식이고 필드를 구성하는 요소의 키값도 객체형식이다.
=> autoIncrement, allowNull, primaryKey등을 구성할 수 있다.
=> type은 Sequelize static 클래스의 프로퍼티로 가져와서 구성해야 한다.

=> sequelize를 통해 db 모델을 구성한다. 타입은 Sequelize class를 직접가져와서 규정한다.

=> 이렇게 정의한 모델은 module.exports = ..를 내보내서 필요한 곳에서 require하여 사용한다.
=> 이 모듈은 자동으로 Promise를 제공하기 때문에 어떤 메서드를 사용하든 then()/catch(), async/await 사용가능


4. 데이터베이스에 JS 정의 동기화하기
sequelize.sync() 메서드는 정의한 모델을 데이터베이스로 동기화해 해당하는 테이블을 생성하고 관계가 있다면 관계도 생성한다. 
promise 구문을 지원하기 때문에 then이나 async/await를 활용하여 사용한다.
if check를 통해 이미 생성된 db를 덮어쓰지 않는다. => 백그라운드에서 자동으로 check한다.
=> root 파일에서 해당 메서드를 실행한다. 시작할 때 사용해야 되기 때문이다.
=> 이렇게 자동으로 생성된 테이블은 두 개의 칼럼이 자동으로 생긴다. createAt, updateAt(TimeStamp)


5. 데이터 삽입 및 제품 생성
sequelize.create() => 테이블에 데이터를 추가하는 메서드이다. 객체를 가져와서 저장하고 데이터베이스에 저장하는 과정을 한 번에 처리한다.
(sequelize.build는 모델에 기반해 새 JS 객체를 생성하며 직접 저장하는 과정이 필요하다.)

=> create의 인자는 객체이고 객체안에 데이터를 key:value 형식으로 지정하고 promise 구문을 사용한다.
=> create의 키는 해당 table의 column이름이고 escape 처리(????)를 해서 저장한다.


ex) Product.create({
    title : title,
    price : price,
    imageUrl : imageUrl,
    description : description
  }).then(result => {
    console.log(result)
  }). catch(err => {
    console.log(err)
  })


6. 데이터 검색 및 제품 찾기
Sequelize.findAll({options}).then().catch()
=> 테이블 전체의 데이터를 담는다.
=> options를 통해 where 조건을 담을 수 있다.


7. where 조건으로 단일 제품 얻기
Sequelize.findByPk() => 원래는 findById였다가 바뀌었다.
findByPk(prodId)를 사용하면 백그라운드에서 findByPk에게 해당 매개변수와 일치하는 로우를 반환한다.

=> 반환되는 데이터는 then(data)=>{console.log(data)}
=> data = {title:..., desc:..., price:....}


8. 관리자 상품 가져오기
=> sequelize.findAll() 메서드를 통해서 모조리 가져온다.
=> render 메서드에 해당 데이터를 전달해준다.
=> findAll 메서드는 들어오는 데이터가 배열형식이다. 하나만 반환되더라도

=> 반환되는 데이터는 data = [{title:..., id:....},{},{}]


9. 상품 업데이트 하기
sequelize.save() => 변경 사항을 업데이트한다.
sequelize 메서드 실행 후 then() 메서드 내에서 사용되면 변경사항들이 저장된다.

ex) findByPk()로 데이터를 가져온 후 then() 블록의 para.key = input.value로 대입 후 sequelize.save()를 호출하면 db에 저장된다.


10. 상품 삭제하기
sequelize.destroy() => 해당된 데이터를 삭제할 수 있게 해준다.
=> 즉시 반영된다.


*** 반환되는 데이터는 JS 객체나 배열형식으로 자동으로 반환된다.
























