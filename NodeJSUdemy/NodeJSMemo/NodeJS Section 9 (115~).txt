1. 경로에 제품 ID 추가
product-list.ejs 파일에서 버튼을 누르면 제품의 상세정보를 보여주고 싶다.
=> 어떤 제품인지를 분간하기 위해 고유 식별자가 필요하다. => ID 같은 것이 필요하다.
=> 각 제품이 save() 메서드가 호출될 떄 Math.random().toString()를 실행하여 고유의 번호를 부여한다.
=> a 태그를 클릭하면 localhost:3000/products/123456 url 전송이 된다. => pageNotFound 페이지가 반환된다.

1-1. product-list.ejs 파일에서 details <a> 태그를 누르게 되면 /products/<%= product.id%> URL 요청을 한다.
1-2. 이 url 요청을 받는 라우터는 shop 라우터이다. /products/:productId를 통해 위의 product.id를 가져올 수 있다.
(key:value 형식이다. productId : product.id)


2. 동적 매개변수 추출하기
router('products/:productId',func)
=> ':경로'는 동적 세그먼트이다. products/ 이후에 들어오는 모든 것을 처리한다는 것이다.

들어오는 req에는 params라는 객체가 존재한다. 콜론 후에 오는 이름으로 productId를 사용했다. 콜론 다음에 사용하는 이름이 params 객체에서 데이터를 추출할 사용하는 이름이 된다.

=> console.log()로 확인할 수 있다.
=> :key의 데이터를 req.params.key를 통해 NodeJS에 가져올 수 있다.

** 동적 매개변수를 받는 router가 존재하면 (products/:...) products/ 뒤에 오는 모든 것들을 받아들인다.
    => 그렇기 때문에 위에서 아래로 읽는 Node.js 특성에 의해 올바르지 않은 router 전송이 될 수 도 있다.
    => 동적 매개변수는 일반적인 router 뒤에 작성하는 것이 필요하다.

2-1. details의 a 태그로 인해 동적 매개변수가 전달되고 라우터에서는 :로 받는다.
2-2. controller에서는 req.params.productId(key)를 통해 동적 매개변수를 얻는다.


3. 상품 상세 데이터 로드하기

**** 함수 정의 시에 매개변수에 함수를 전달하고 본문에 함수를 실행한다.
**** 함수를 호출 할 떄 콜백의 인자에 함수 정의 시 본문 함수 호출 값이 반환된다.

=>  매개변수 값을 조정하는 것이다.

3-1. details <a> 태그를 통해 url를 전송하여 라우터를 거쳐 controller에서 동적 매개변수를 얻는다.
3-2. 해당 id를 통해 상품를 찾고 console.log()에 표현하고 redirect한다.
3-3. 해당 id를 통해 상품을 찾고 console.log()에 표현하기 위해서는 동기적으로 작동해야 한다. => 콜백함수를 통해 해결한다.
3-4. find 메서드는 배열 메서드이고 해당하는 배열 요소 하나를 찾으면 반환한다. 그 반환된 요소를 매개변수에 넣어준다.


4. 제품 상세 보기 렌더링
4-1. product-list.ejs에서 details 버튼을 누르면 a 태그로 인해 /products/number... url이 서버로 전송된다.
4-2. 이 데이터는 router에 동적 매개변수를 받는 동적 세그먼트에 의해 받아자고 getProduct 함수가 실행된다.
4-3. getProduct 함수는 동적 세그먼트에 의해 id가 인수로 들어가고 그 id로 find 메서드를 사용해서 일치하는 항목을 가져온다.
4-4. 일치하는 항목만을 렌더링하는 page를 생성하고 반환한다.
4-5. path키가 필요하다. include navigation에 active class의 여부를 가르기 떄문이다.


5. Post 요청으로 데이터 전달하기
post 요청은 자동으로 입력 데이터가 본문에 포함된 요청을 준다. 그렇기 때문에 url에 무엇을 더할 필요가 없다.
=> 미들웨어로 받을 떄 req.body에 데이터가 존재한다.
ejs의 include에 변수를 전달하고 싶다면 (include 1,2) 1은 어떤 파일이 들어가야 하는지 2는 어떤 데이터를 줄 지 객체 형식으로 건네준다. {product(key) : product(value)}

=> ejs for 루프를 통해서 데이터를 동적으로 표현했다. for loop의 데이터는 해당 ejs 파일에만 사용가능한 로컬 변수이다. 동적인 데이터를 include에 내려주고 싶다면?
=> include('...address', {key:value})로 전달해주면 된다.

=> form의 input를 통해 데이터를 가져오고 싶을 때 이미 정해진 데이터를 가져오고 싶다면?
  <input type="hidden" name = "productId" value = "productId">를 사용한다.

5-1. details 페이지, product-list 페이지에서 add-to-cart를 통해 데이터를 전송하여 처리하는 로직이 필요하다.
5-2. details 페이지는 ejs와 Node.js가 공유하는 데이터가 명확하기 때문에 include에 데이터를 내려줄 필요가 없다. 그러나 product-list 페이지는 for-loop를 통해 데이터를 동적으로 표현했기 때문에 include(1,2) 2의 인자에 객체형식으로 데이터를 줘야 한다.
5-3. 해당 add-to-cart의 form은 post 요청을 하기 위해서 만들었고 input를 hidden으로 만들고 name과 value를 통해 details 상품에 일치하는 데이터가 보내진다.


6. 장바구니 모델 추가하기
장바구니의 로직은 이전의 cart에 추가한 것을 유지하고 현재 추가된 아이템을 cart에 추가하는 로직이 필요하다.

*** 콜백함수의 요점
=> 실행시점을 내가 정할 수 있다는 것이다.
=> 비동기 처리를 할 떄 매우 유용하다.

6-1. details와 일치하는 상품을 가져오는 메서드를 실행하고 그 메서드의 결과를 매개변수로 하는 함수를 사용한다.
6-2. id와 product.price를 매개변수로 하는 cart.addProduct()를 실행한다.

Cart Model
1. 매개변수로 id와 price가 존재한다.
2. fs.readFile를 통해 파일의 존재 여부를 확인 후에 에러가 발생하지 않으면 cart 변수에 JSON.parse(..)를 통해  javaScript 객체를 넣는다. 그렇지 않다면 cart는 {product:[], totalPrice :0}으로 초기화한다.
3. 매개변수 id를 통해 기존의 상품을 또 추가한지 확인한다. findIndex를 사용하여 existingProductIndex 변수명에 index를 담는다.
4. cart.products[existingProductIndex]의 정보를 existingProduct에 담는다.
5. 기존의 상품이 있고 없고에 따라 if를 사용하여 처리한다.
6. 기존의 상품이 존재한다면 updatedProduct 변수에 {...existingProduct}를 사용하여 데이터를 넣는다.
7. updatedProduct.qty = updatedProduct.qty + 1;/ quy라는 키를 설정하고 +1를 한다.
8.  cart.products = [...cart.products]; => 재설정한다.
9. cart.products[existingProductIndex] = updatedProduct; 이미 존재하는 인덱스에 데이터를 updatedProduct로 덮어씌운다.
10. totalprice를 처리하고 해당 데이터 객체를 JSON 데이터 형식으로 바꿔서 파일을 작성한다.


7. 쿼리 매개변수 사용
쿼리 매개변수는 ?를 추가하여 모든 URL에 추가할 수 있으며 edit=true를 비롯한 = 표시로 분할한 키-값 쌍을 넣어주면 된다.
& 분할해 줌으로 다수의 쿼리 매개 변수를 입력할 수 있다.

도달하게 되는 라우트는 ? 표시까지의 부분을 통해 결정된다. => 쿼리매개변수에 의해 컨트롤러에 갈 라우터가 방해받지 않는다. 

항상 컨트롤러에서 쿼리 매개변수는 확인할 수 있다. => req.query.key를 통해 쿼리매개변수 획득가능
쿼리매개변수로 부터 받은 값은 항상 문자열이다. true => "true"

ex) localhost:3000/admin/edit-product/?edit=true
=> /? 쿼리매개변수의 시작점


8. 데이터로 제품 편집 페이지 채우기
10-1. get 요청에 의해 admin product로 이동한다. 해당 요청 url은 동적 세그먼트와 쿼리 매개변수가 존재한다.
이를 통해서 제품의 정보를 얻고 input에 쏜다.
10-2. req.query.key를 통해 쿼리 매개변수의 value를 얻고 req.params.key를 통해 동적 세그먼트를 얻는다.
10-3. 만약 쿼리 매개변수의 값이 truth 값이 아니라면 /로 리다이렉트한다.
10-4. Product.findById를 통해 제품 하나의 정보를 가져오고 admin/edit/product 뷰를 반환한다.
10-5. Product.findById로 가져온 데이터를 ejs에서 사용하기 위해 객체의 key-value로 준다.


9. 편집 페이지에 연결하기
admin product.ejs에서 edit 버튼를 눌러서 edit-product 뷰를 반환하게 하자.
9-1. edit은 a태그로 /admin/edit-product/<%=product.id%>?edit=true%>를 설정
9-2. 위의 동적 세그먼트에 의해서 findById로 해당 제품의 정보가 edit-product.ejs에 존재한다.
9-3. 그 정보를 페이지에 부여한다.
9-4. update button를 만들고 동적으로 이름을 부여한다.


10. 제품 데이터 편집하기

10-1. edit-product.ejs에서 form의 button을 눌러서 post 요청을 보낸다. url은 ejs 문법으로 동적으로 보낸다.
=> admin/edit-product(add-product) (POST)
10-2. postEditProduct가 호출된다. post 요청이기에 input의 name=value의 값이 req.body에 존재한다.
10-3. req.body.key로 value에 접근하여 새로운 Product 객체를 생성한다.
10-3. 그 객체의 save() 메서드를 실행한다.


11. 제품 삭제 기능 추가






















