1. node.js란 무엇인가?
Node.js는 JS 런타임이다. 브라우저 밖에서 JS를 사용한다는 것이다.
=> 스크립트를 브라우저 환경이 아닌 Node.js 환경에서 실행시킨다는 것이다.

Node.js는 v8엔진을 사용한다. 
엔진은 JS코드를 머신 코드로 컴파일한다. 머신 코드는 컴퓨터가 알아듣고 컴퓨가 처리하기에 효율적인 코드를 의미한다. 
V8는 C++로 만들었다.

Node.js는 v8 엔진에 브라우저의 기능을 제외하고 Server 기능을 추가한 서버전용 코드라고 생각하면 된다.


2. Node.js 설치 및 앱 개발
명령 프롬프트에서 node-v => 설치된 노드 버전이 출력된다.
대화형 모드 진입 => node => 특정한 노드 명령어를 사용할 수 있다.
스크립트를 NodeJS로 실행시키면 Node.js를 실행해야 한다.
node 파일이름.js => node.js로 해당 스크립트를 실행시킨다.

어떤 특정 기능을 사용하려면 Node.js에게 require 구문을 통해 알려야 한다.
파일시스템 기능 => fs
cosnt fs = require('fs');


3. Node.js 역할과 사용법 이해 
Node.js는 서버의 역할에만 국한되지 않는다.
Node.js는 유틸리티 스크립트를 작성하는데 큰 도움을 준다.
=> 빌드 도구와 비 서버 사이드에서도 사용된다는 것이다.

Node.js는 서버 자체를 스스로 작성한다. 
Node.js는 들어오는 모든 요청을 처리한다.
Node.js는 받은 요청을 응답한다. 


4. REPL 작업 vs 파일 사용

노드 코드를 실행하는 두 가지 다른 방법
4-1. REPL
=> Read, Evaluate, Print, Loop(wait for new Input)
Ternimal에서 node를 사용하면 REPL를 사용하게 된다. Ctrl+C => 나가기
작성했던 코드가 저장되지 않지만 간단한 테스트를 할 유용한 도구이다.

4-2. Excute Files
실사용하는 Node.js 코드를 파일화한다.
일련의 절차가 예측가능하다.
명령프롬프트에서 node 파일이름.js를 하면 Node.js에서 스크립트를 실행하는 것이다.

































