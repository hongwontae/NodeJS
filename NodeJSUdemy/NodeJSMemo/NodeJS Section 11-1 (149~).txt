1. Sequelize란?
Object-Relational Mapping Library이다.
백그라운드에서 실제로 SQL 코드를 처리하며 JS 객체로 맵핑해 SQL 코드를 실행하는 편리한 메서드를 재공하기 떄문에 SQL 코드를 직접 작성하지 않아도 된다.

객체가 Sequelize에 의해 DB에 매핑되면 테이블을 자동으로 생성한다. 테이블뿐만 아니라 관계까지 자동으로 설정한다.
=> 객체를 명령하면 Sequelize가 백그라운드에서 sql 명령을 실행한다.

Seque는 데이터베이스를 다루는 모델을 제공하고 모델을 정의한다.


2. 데이터베이스에 연결
Sequelize 설치 => npm install --save sequelize
Sequelize는 MySQL2 패키지를 필요로 한다.

sequelize는 class이다. new 연산자를 통해 객체를 생성한다.
이 떄 인자의 값으로 db이름, username, password, {options}를 준다.

{dialect : 'mysql', host : 'localhost'} => dialect=> mysql 문법을 사용하겠다.

=> 이렇게 구성되면 Sequelize 환경으로 구성된 커넥션 풀이 존재하는 것이다.


3. 모델 정의
Sequelize class와 sequelize 커넥션 풀을 가져오면 Sequelize가 관리할 모델을 정의할 수 있다.

sequelize.define() 
=> 새 모델을 정의한다. 첫 번쨰 인자는 모델 이름(소문자 규율), 두 번쨰 인자는 모델의 구조를 정의한다. 자동으로 생성할 데이터베이스 테이블을 정의한다. js 객체로 구성한다. 제품들이 가지는 속성이나 필드를 정의하면 된다.

ex) {
  id : {
   type : Sequelize.INTEGER,
   autoIncrement : true,
    allowNull : false,
    primaryKey : true
}
title : Sequelize.STRING
}
=> define의 두 번째 인자는 객체형식이고 필드를 구성하는 요소의 키값도 객체형식이다.
=> autoIncrement, allowNull, primaryKey등을 구성할 수 있다.
=> type은 Sequelize static 클래스의 프로퍼티로 가져와서 구성해야 한다.


4. 데이터베이스에 JS 정의 동기화하기
sequelize.sync() 메서드는 정의한 모델을 데이터베이스로 동기화해 해당하는 테이블을 생성하고 관계가 있다면 관계도 생성한다. 
promise 구문을 지원하기 때문에 then이나 async/await를 활용하여 사용한다.
if check를 통해 이미 생성된 db를 덮어쓰지 않는다.
=> root 파일에서 해당 메서드를 실행한다. 시작할 때 사용해야 되기 때문이다.
=> 이렇게 자동으로 생성된 테이블은 두 개의 칼럼이 자동으로 생긴다. createAt, updateAt(TimeStamp)


5. 데이터 삽입 및 제품 생성
sequelize.create() => 테이블에 데이터를 추가하는 메서드이다. 객체를 가져와서 저장하고 데이터베이스에 저장하는 과정을 한 번에 처리한다.

=> create의 인자는 객체이고 객체안에 데이터를 key:value 형식으로 지정하고 promise 구문을 사용한다.

ex) Product.create({
    title : title,
    price : price,
    imageUrl : imageUrl,
    description : description
  }).then(result => {
    console.log(result)
  }). catch(err => {
    console.log(err)
  })


6. 데이터 검색 및 제품 찾기
Sequelize.findAll({options}).then().catch()
=> 테이블 전체의 데이터를 담는다.
=> options를 통해 where 조건을 담을 수 있다.


7. where 조건으로 단일 제품 얻기




























