1. 상위 함수
=> 어떤 함수 A가 다른 함수 B를 호출했다면 함수 A가 B의 상위 함수이다.


2. 예외 전파
2-1. 함수를 호출하면? => 콜 스택에 쌓인다. => 함수가 종료되면? => 스택에서 사라진다.
2-2. 예외가 발생하면 catch을 찾기 위해서 콜 스택을 따라 예외가 전파된다.
2-3. catch 블록을 찾지 못하면 브라우저 JS는 window.onerror 콜백 함수가 에러를 처리한다. => 전역 에러 처리기
2-4. NodeJS에서 catch를 찾지 못하면 process 객체의 uncaughtException으로 에러를 처리한다.


3. catch(error){...}
=> catch를 찾게 되면 throw를 통해서 던진 값을 인자로 받게 된다.
=> catch를 실행해야 uncaughtException 충돌을 피할 수 있다.


4. throw
=> throw를 던지면 코드 실행을 멈추고 catch 블록을 찾기 위해 예외가 상위 함수로 전파된다.
=> throw의 값은 무엇이든지 가능하다.


5. try catch
=> try에서 에러가 발생하면 catch를 찾는다.
=> 없으면 상위 함수에서 catch를 찾고 그렇지 않다면 uncaughtException 에러가 발생한다.
=> catch을 찾아서 처리가 완료되면 밑에 코드들이 실행되고 catch를 찾지 못하거나 실행되지 않으면 다음 코드들이 실행되지 않는다.









